// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeProject.Data;

#nullable disable

namespace OfficeProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813113816_AddSpacificServiceEntity")]
    partial class AddSpacificServiceEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OfficeProject.Models.Entities.Accounts", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal>("ClosedBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<decimal>("OpeningBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaymentsMade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AccountId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.AssignedUsers", b =>
                {
                    b.Property<int>("AssignedUsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignedUsersId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignedUsersId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignedUsers");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.ClientSources", b =>
                {
                    b.Property<int>("ClientSourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientSourcesId"));

                    b.Property<string>("ClientSourcesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientSourcesId");

                    b.ToTable("clientSources");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Clients", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientContact1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientContact2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientEmail1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientEmail2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSourceNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.ManageServiceWithDigitalMarketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedUsers_Id")
                        .HasColumnType("int");

                    b.Property<int>("Products_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<int>("Service_Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManageServiceWithDigitalMarketer");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.OthersService", b =>
                {
                    b.Property<int>("OthersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OthersId"));

                    b.Property<string>("ExtraField1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LableName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Post")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("OthersId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OthersService");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.OthersTaskDetails", b =>
                {
                    b.Property<int>("OthersTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OthersTaskId"));

                    b.Property<string>("LableName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SharedPost")
                        .HasColumnType("int");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("OthersTaskId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("OthersTaskDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.PaymentSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ProjectsProjectId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("PaymentSchedule");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Products", b =>
                {
                    b.Property<int>("ProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductsId"));

                    b.Property<bool>("IsAdsBudget")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBacklink")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClasified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReels")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocialSharing")
                        .HasColumnType("bit");

                    b.Property<string>("ProductsAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsCostingPrice")
                        .HasColumnType("int");

                    b.Property<string>("ProductsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProductsEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProductsModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsSellingPrice")
                        .HasColumnType("int");

                    b.Property<bool>("ProductsStatus")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("BillingType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentIssue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmbRakning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IgFollowers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdminMarkAsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserMarkAsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserWorkDone")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProjectCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProjectCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SeoServiceDetails", b =>
                {
                    b.Property<int>("SeoServiceDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeoServiceDetailsId"));

                    b.Property<string>("ExtraField1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("SeoServiceDetailsId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SeoServiceDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SeoTaskDetails", b =>
                {
                    b.Property<int>("SeoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeoTaskId"));

                    b.Property<int>("CurrentRank")
                        .HasColumnType("int");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("SeoTaskId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("SeoTaskDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Services", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal>("AdsBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Backlink")
                        .HasColumnType("int");

                    b.Property<string>("BillingType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Clasified")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraField1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("FinalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdsBudget")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBacklink")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClasified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReels")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocialSharing")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SocialSharing")
                        .HasColumnType("int");

                    b.Property<int>("SpacificUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalPost")
                        .HasColumnType("int");

                    b.Property<int>("TotalReels")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("ProductsId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SpacificUserTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("Service_Id")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("Service_Id");

                    b.ToTable("SpacificUserTask");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserActivityMaster", b =>
                {
                    b.Property<int>("MasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterId"));

                    b.Property<string>("MasterActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MasterId");

                    b.ToTable("UserWorkingActivityList");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserDesignation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"));

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("DesignationId");

                    b.HasIndex("User_Id");

                    b.ToTable("UserDesignation");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserTaskMaster", b =>
                {
                    b.Property<int>("UserTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTaskId"));

                    b.Property<string>("UserTaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTask_UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTaskId");

                    b.HasIndex("UserTask_UserId");

                    b.ToTable("UserTask");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserWorkingActivity", b =>
                {
                    b.Property<int>("workingActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workingActivityId"));

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("WorkingActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("workingActivityId");

                    b.HasIndex("ProductsId");

                    b.ToTable("UserWorkingActivity");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PreeAssignUserRole")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WebDeveTaskDetails", b =>
                {
                    b.Property<int>("webDevTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("webDevTaskId"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTaskId")
                        .HasColumnType("int");

                    b.HasKey("webDevTaskId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("WebDeveTaskDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WebDevelopment", b =>
                {
                    b.Property<int>("WebDevelopmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebDevelopmentId"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignTools")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HostingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HostingLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HostingRenewalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("HostingRenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MackupLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerFtpAssign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WebDevelopmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("WebDevelopment");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WorkTaskDetails", b =>
                {
                    b.Property<int>("WorkTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTaskId"));

                    b.Property<int>("Backlink")
                        .HasColumnType("int");

                    b.Property<string>("BacklinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Clasified")
                        .HasColumnType("int");

                    b.Property<string>("ClasifiedURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedReels")
                        .HasColumnType("int");

                    b.Property<int>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraField1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField6")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExtraField7")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SharedPost")
                        .HasColumnType("int");

                    b.Property<int>("SocialSharing")
                        .HasColumnType("int");

                    b.Property<string>("SocialSharingURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedAdsBudget")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Work_UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkTaskId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Work_UserId");

                    b.ToTable("WorkTaskDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Accounts", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Clients", "Client")
                        .WithOne("Accounts")
                        .HasForeignKey("OfficeProject.Models.Entities.Accounts", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.AssignedUsers", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Projects", "Projects")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeProject.Models.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Clients", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Users", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.OthersService", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithMany("OthersServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.OthersTaskDetails", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.WorkTaskDetails", "WorkRecords")
                        .WithMany("OthersTaskDetails")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkRecords");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.PaymentSchedule", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Projects", null)
                        .WithMany("PaymentSchedule")
                        .HasForeignKey("ProjectsProjectId");

                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithOne("PaymentSchedule")
                        .HasForeignKey("OfficeProject.Models.Entities.PaymentSchedule", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Products", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Projects", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Clients", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeProject.Models.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SeoServiceDetails", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithMany("SeoServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SeoTaskDetails", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.WorkTaskDetails", "WorkRecords")
                        .WithMany("SeoTaskDetails")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkRecords");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Services", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("OfficeProject.Models.Entities.Projects", "Projects")
                        .WithMany("Services")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.SpacificUserTask", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithMany("SpacificUserTask")
                        .HasForeignKey("Service_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Transactions", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Accounts", "Accounts")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeProject.Models.Entities.PaymentSchedule", "PaymentSchedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Accounts");

                    b.Navigation("PaymentSchedule");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserDesignation", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Users", "Users")
                        .WithMany("UserDesignation")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserRoles", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Users", "Users")
                        .WithMany("UserRoles")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserTaskMaster", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserTask_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.UserWorkingActivity", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Products", "Products")
                        .WithMany("UserWorkingActivity")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WebDeveTaskDetails", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.WorkTaskDetails", "WorkRecords")
                        .WithMany("WebDeveTaskDetails")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkRecords");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WebDevelopment", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithMany("WebDevelopment")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WorkTaskDetails", b =>
                {
                    b.HasOne("OfficeProject.Models.Entities.Services", "Services")
                        .WithMany("WorkTaskDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeProject.Models.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Work_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Accounts", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Clients", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Products", b =>
                {
                    b.Navigation("UserWorkingActivity");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Projects", b =>
                {
                    b.Navigation("AssignedUsers");

                    b.Navigation("PaymentSchedule");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Services", b =>
                {
                    b.Navigation("OthersServices");

                    b.Navigation("PaymentSchedule");

                    b.Navigation("SeoServiceDetails");

                    b.Navigation("SpacificUserTask");

                    b.Navigation("WebDevelopment");

                    b.Navigation("WorkTaskDetails");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.Users", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("UserDesignation");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OfficeProject.Models.Entities.WorkTaskDetails", b =>
                {
                    b.Navigation("OthersTaskDetails");

                    b.Navigation("SeoTaskDetails");

                    b.Navigation("WebDeveTaskDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
