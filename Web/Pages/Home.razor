@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject IDataSerializer? JSON
@using OfficeProject.Models.DTO
@using OfficeProject.Models.Enums

<AuthorizeView>
    <Authorized>
        <PageTitle>Dashboard</PageTitle>

        <div class="container-fluid py-4">
            <!-- Welcome Header -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h1 class="h3 mb-1">Welcome back, @(userName ?? "User")!</h1>
                                <p class="text-muted mb-0">Here's what's happening today</p>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-primary">@DateTime.Now.ToString("dddd, MMMM dd")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Key Metrics -->

            <div class="row mb-4">
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                        <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-md-6 mb-4">
                        <div class="card bg-primary text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="text-uppercase text-white-50 small mb-0">Tasks</h6>
                                    <i class="fas fa-tasks fa-2x opacity-50"></i>
                                </div>

                                @{
                                    var allDays = PostDayLeftList
                                    .Concat(ReelsDayLeftList)
                                    .Concat(BackLinkDayLeftList)
                                    .Concat(ClasifiedDayLeftList)
                                    .Concat(SocialSharingDayLeftList)
                                    .Distinct()
                                    .OrderBy(x => x)
                                    .ToList();
                                }

                                @{
                                    var found = false;
                                }

                                @foreach (var day in allDays)
                                {
                                    var hasTasks =
                                    GetSumByDay(allPostServices, day, s => s.DayLeftPost, s => s.RequiredPost) > 0 ||
                                    GetSumByDay(allReelsServices, day, s => s.DayLeftReels, s => s.RequiredReels) > 0 ||
                                    GetSumByDay(allBacklinkServices, day, s => s.DayLeftBacklink, s => s.RequiredBacklink) > 0 ||
                                    GetSumByDay(allClasifiedServices, day, s => s.DayLeftClasified, s => s.RequiredClasified) > 0 ||
                                    GetSumByDay(allSocialSharingServices, day, s => s.DayLeftSocialSharing, s => s.RequiredSocialSharing) > 0;

                                    if (hasTasks && !found)
                                    {
                                        found = true;
                                        <div>
                                            <div><strong>@GetDayLabel(day)</strong></div>
                                            <ul>



                                                @if (GetSumByDay(allPostServices, day, s => s.DayLeftPost, s => s.RequiredPost) > 0)
                                                {
                                                    <li>
                                                        <div>Pending Posts: @GetSumByDay(allPostServices, day, s => s.DayLeftPost, s => s.RequiredPost)</div>
                                                    </li>
                                                }


                                                @if (GetSumByDay(allReelsServices, day, s => s.DayLeftReels, s => s.RequiredReels) > 0)
                                                {
                                                    <li>
                                                        <div>Pending Reels: @GetSumByDay(allReelsServices, day, s => s.DayLeftReels, s => s.RequiredReels)</div>
                                                    </li>
                                                }


                                                @if (GetSumByDay(allBacklinkServices, day, s => s.DayLeftBacklink, s => s.RequiredBacklink) > 0)
                                                {
                                                    <li>
                                                        <div>Pending Backlinks: @GetSumByDay(allBacklinkServices, day, s => s.DayLeftBacklink, s => s.RequiredBacklink)</div>
                                                    </li>
                                                }

                                                @if (GetSumByDay(allClasifiedServices, day, s => s.DayLeftClasified, s => s.RequiredClasified) > 0)
                                                {
                                                    <li>
                                                        <div>Pending Classified: @GetSumByDay(allClasifiedServices, day, s => s.DayLeftClasified, s => s.RequiredClasified)</div>
                                                    </li>
                                                }

                                                @if (GetSumByDay(allSocialSharingServices, day, s => s.DayLeftSocialSharing, s => s.RequiredSocialSharing) > 0)
                                                {
                                                    <li>
                                                        <div>Pending Social Sharing: @GetSumByDay(allSocialSharingServices, day, s => s.DayLeftSocialSharing, s => s.RequiredSocialSharing)</div>
                                                    </li>
                                                }


                                            </ul>
                                        </div>

                                        break; // Stop after showing the first available day
                                    }
                                }

                                @if (!found)
                                {
                                    <div>No tasks available.</div>
                                }

                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-4">
                        <div class="card shadow-sm rounded-4 border-0">
                            <div class="card-header bg-white border-0 d-flex justify-content-between align-items-center">
                                <h5 class="mb-0 text-primary fw-semibold">Performance Overview</h5>
                                <i class="fas fa-tachometer-alt text-muted"></i>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Post</span>
                                        <span class="badge bg-success">@Math.Round(CompletionPostRate)%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-success" role="progressbar"
                                        style="width: @Math.Round(CompletionPostRate)%;"
                                        aria-valuenow="@Math.Round(CompletionPostRate)"
                                        aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Reel</span>
                                        <span class="badge bg-info text-dark">@Math.Round(CompletionReelsRate)%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-info" role="progressbar"
                                        style="width: @Math.Round(CompletionReelsRate)%;"
                                        aria-valuenow="@Math.Round(CompletionReelsRate)"
                                        aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Backlink</span>
                                        <span class="badge bg-primary">@Math.Round(CompletionBacklinkRate)%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-primary" role="progressbar"
                                        style="width: @Math.Round(CompletionBacklinkRate)%;"
                                        aria-valuenow="@Math.Round(CompletionBacklinkRate)"
                                        aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Classified</span>
                                        <span class="badge bg-warning text-dark">@Math.Round(CompletionClassifiedRate)%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-warning" role="progressbar"
                                        style="width: @Math.Round(CompletionClassifiedRate)%;"
                                        aria-valuenow="@Math.Round(CompletionClassifiedRate)"
                                        aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>

                                <div>
                                    <div class="d-flex justify-content-between">
                                        <span>Social Sharing</span>
                                        <span class="badge bg-danger">@Math.Round(CompletionSocialSharingRate)%</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-danger" role="progressbar"
                                        style="width: @Math.Round(CompletionSocialSharingRate)%;"
                                        aria-valuenow="@Math.Round(CompletionSocialSharingRate)"
                                        aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <hr />

                    <div class="col-md-6 mb-4">
                        <div class="card bg-primary text-white h-100">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="text-uppercase text-white-50 small mt-3">Averages</h6>

                                </div>
                                <div class="row">
                                    <!-- Target Avg -->
                                    <div class="col-md-6">
                                        <strong>Target Avg (per day):</strong>
                                        <ul class="mb-2">
                                            @if (@Math.Round(TergetWorkingAvgPost, 2) > 0)
                                            {
                                                <li>Posts: @Math.Round(TergetWorkingAvgPost, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgReels, 2) > 0)
                                            {
                                                <li>Reels: @Math.Round(TergetWorkingAvgReels, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgBackLink, 2) > 0)
                                            {
                                                <li>Backlinks: @Math.Round(TergetWorkingAvgBackLink, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgClasified, 2) > 0)
                                            {
                                                <li>Classifieds: @Math.Round(TergetWorkingAvgClasified, 2)</li>
                                            }
                                            @if (@Math.Round(TergetWorkingAvgSocialSharing, 2) > 0)
                                            {
                                                <li>Social Sharing: @Math.Round(TergetWorkingAvgSocialSharing, 2)</li>
                                            }




                                        </ul>
                                    </div>

                                    <!-- Current Avg -->
                                    <div class="col-md-6">
                                        <strong>Current Avg (per day):</strong>
                                        <ul>

                                            @if (@Math.Round(TergetWorkingAvgPost, 2) > 0)
                                            {
                                                <li>Posts: @Math.Round(CurrentAvgPost, 2)</li>
                                            }
                                            @if (@Math.Round(TergetWorkingAvgReels, 2) > 0)
                                            {
                                                <li>Reels: @Math.Round(CurrentAvgReels, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgBackLink, 2) > 0)
                                            {
                                                <li>Backlinks: @Math.Round(CurrentAvgBackLink, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgClasified, 2) > 0)
                                            {
                                                <li>Classifieds: @Math.Round(CurrentAvgClasified, 2)</li>

                                            }
                                            @if (@Math.Round(TergetWorkingAvgSocialSharing, 2) > 0)
                                            {
                                                <li>Social Sharing: @Math.Round(CurrentAvgSocialSharing, 2)</li>

                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                }

                @*  <div class="col-md-3 mb-3 mb-md-0">
                    <div class="card bg-success text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-uppercase text-white-50 small">Projects &amp;&amp; Services</h6>
                                </div>
                                <i class="fas fa-project-diagram fa-2x opacity-50"></i>
                            </div>
                            <div class="mt-3">
                                <div>Projects - @TotalProject</div>
                                <br />
                                <div>Services - @TotalService</div>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="col-md-3">
                    <div class="card bg-warning text-dark h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-uppercase text-dark-50 small">Upcoming</h6>
                                    <h2 class="mb-0">3</h2>
                                </div>
                                <i class="fas fa-calendar-alt fa-2x opacity-50"></i>
                            </div>
                            <div class="mt-3">
                                <span class="text-dark-50 small">Meetings today</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div> *@

                <!-- Quick Actions & Recent Activity -->
                @* <div class="row">
                <div class="col-lg-6 mb-4 mb-lg-0">
                    <div class="card shadow-sm h-100">
                        <div class="card-header bg-white border-bottom">
                            <h5 class="mb-0">Quick Actions</h5>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-6">
                                    <button class="btn btn-outline-primary w-100 py-3">
                                        <i class="fas fa-plus me-2"></i> New Task
                                    </button>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-outline-success w-100 py-3">
                                        <i class="fas fa-file-alt me-2"></i> Create Report
                                    </button>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-outline-info w-100 py-3">
                                        <i class="fas fa-users me-2"></i> Add Team
                                    </button>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-outline-warning w-100 py-3">
                                        <i class="fas fa-calendar-plus me-2"></i> Schedule
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Activity -->
                <div class="col-lg-6">
                    <div class="card shadow-sm h-100">
                        <div class="card-header bg-white border-bottom">
                            <h5 class="mb-0">Recent Activity</h5>
                        </div>
                        <div class="card-body p-0">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item border-0">
                                    <div class="d-flex">
                                        <div class="flex-shrink-0 text-success">
                                            <i class="fas fa-check-circle"></i>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <small class="text-muted float-end">10 min ago</small>
                                            <h6 class="mb-1">Task completed</h6>
                                            <p class="mb-0 small">Project kickoff presentation</p>
                                        </div>
                                    </div>
                                </li>
                                <li class="list-group-item border-0">
                                    <div class="d-flex">
                                        <div class="flex-shrink-0 text-primary">
                                            <i class="fas fa-comment-alt"></i>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <small class="text-muted float-end">25 min ago</small>
                                            <h6 class="mb-1">New comment</h6>
                                            <p class="mb-0 small">On Q2 financial report</p>
                                        </div>
                                    </div>
                                </li>
                                <li class="list-group-item border-0">
                                    <div class="d-flex">
                                        <div class="flex-shrink-0 text-warning">
                                            <i class="fas fa-calendar-check"></i>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <small class="text-muted float-end">1 hour ago</small>
                                            <h6 class="mb-1">Meeting scheduled</h6>
                                            <p class="mb-0 small">Client review at 2:00 PM</p>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div> *@

                <!-- Recent Projects -->
                @*  <div class="row mt-4">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header bg-white border-bottom">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Recent Projects</h5>
                                <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Project</th>
                                            <th>Team</th>
                                            <th>Status</th>
                                            <th>Progress</th>
                                            <th>Deadline</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Website Redesign</td>
                                            <td>
                                                <div class="avatar-group">
                                                    <span class="avatar avatar-sm rounded-circle bg-primary text-white">JD</span>
                                                    <span class="avatar avatar-sm rounded-circle bg-success text-white">AM</span>
                                                    <span class="avatar avatar-sm rounded-circle bg-info text-white">+2</span>
                                                </div>
                                            </td>
                                            <td><span class="badge bg-warning">In Progress</span></td>
                                            <td>
                                                <div class="progress" style="height: 6px;">
                                                    <div class="progress-bar bg-warning" role="progressbar" style="width: 65%"></div>
                                                </div>
                                            </td>
                                            <td>May 15</td>
                                        </tr>
                                        <tr>
                                            <td>Mobile App Development</td>
                                            <td>
                                                <div class="avatar-group">
                                                    <span class="avatar avatar-sm rounded-circle bg-danger text-white">SK</span>
                                                    <span class="avatar avatar-sm rounded-circle bg-info text-white">+3</span>
                                                </div>
                                            </td>
                                            <td><span class="badge bg-success">Completed</span></td>
                                            <td>
                                                <div class="progress" style="height: 6px;">
                                                    <div class="progress-bar bg-success" role="progressbar" style="width: 100%"></div>
                                                </div>
                                            </td>
                                            <td>Apr 28</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div> *@
            </div>
        </div>


    </Authorized>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private string? userName;
    private bool loadFailed = false;
    private bool isLoading = true;
    private List<ProjectsDTO> projects = new();

    private int TotalProject { get; set; }
    private int TotalService { get; set; }

    private int FirstMinPost { get; set; }
    private int FirstMinReels { get; set; }
    private int FirstMinBacklink { get; set; }
    private int FirstMinClassified { get; set; }
    private int FirstMinSocialSharing { get; set; }

    private int SecondMinPost { get; set; }
    private int SecondMinReels { get; set; }
    private int SecondMinBacklink { get; set; }
    private int SecondMinClassified { get; set; }
    private int SecondMinSocialSharing { get; set; }

    private int ThirdMinPost { get; set; }
    private int ThirdMinReels { get; set; }
    private int ThirdMinBacklink { get; set; }
    private int ThirdMinClassified { get; set; }
    private int ThirdMinSocialSharing { get; set; }

    private double CompletionPostRate { get; set; }
    private double CompletionReelsRate { get; set; }
    private double CompletionBacklinkRate { get; set; }
    private double CompletionClassifiedRate { get; set; }
    private double CompletionSocialSharingRate { get; set; }


    private double TergetWorkingAvgPost { get; set; }
    private double TergetWorkingAvgReels { get; set; }
    private double TergetWorkingAvgBackLink { get; set; }
    private double TergetWorkingAvgClasified { get; set; }
    private double TergetWorkingAvgSocialSharing { get; set; }


    private double CurrentAvgPost { get; set; }
    private double CurrentAvgReels { get; set; }
    private double CurrentAvgBackLink { get; set; }
    private double CurrentAvgClasified { get; set; }
    private double CurrentAvgSocialSharing { get; set; }


    [Inject] private DateService? DateService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private ApiService api { get; set; } = null!;
    [Inject] private IGlobalDataService? GlobalDataService { get; set; }

    private List<int> PostDayLeftList = new();
    private List<int> ReelsDayLeftList = new();
    private List<int> BackLinkDayLeftList = new();
    private List<int> ClasifiedDayLeftList = new();
    private List<int> SocialSharingDayLeftList = new();



    private List<ServicesDTO> allPostServices = new();
    private List<ServicesDTO> allReelsServices = new();
    private List<ServicesDTO> allBacklinkServices = new();
    private List<ServicesDTO> allClasifiedServices = new();
    private List<ServicesDTO> allSocialSharingServices = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //     userName = authState.User.Identity?.Name;
    //     isLoading = true;
    //     await GetProjectPerUserAsync();
    //     isLoading = false;
    // }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged(); // This forces the UI to show the spinner before awaiting the data

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity?.Name;

        // if (!GlobalDataService.HasData)
        // {
            // JSON.Serializer(GlobalDataService.Projects, "Before GlobalDataService.HasData");
            await GetProjectPerUserAsync();
        // }
        // else
        // {
        //     JSON.Serializer(GlobalDataService.Projects, "After GlobalDataService.HasData");
        //     projects = GlobalDataService.Projects;

        // }

        isLoading = false;
        StateHasChanged(); // Re-render again after loading
    }



    protected async Task GetProjectPerUserAsync()
    {
        try
        {
            // if (!GlobalDataService.HasData)
            // {
                projects = await api.GetProjectPerUserAsync();
            //     GlobalDataService!.Projects = projects;
            //     JSON.Serializer(GlobalDataService.Projects, "Before GlobalDataService.HasData");
            // }
            // else
            // {
            //     JSON.Serializer(GlobalDataService.Projects, "After GlobalDataService.HasData");
            //     projects = GlobalDataService.Projects;

            // }
            GetTodayTerget();

        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }

    private void GetTodayTerget()
    {
        foreach (var project in projects)
        {
            if (project.Services != null && project.ProjectType == ProjectType.SERVICE && project.Services.Any())
            {
                TotalProject += 1;
                foreach (var service in project.Services)
                {
                    TotalService += 1;

                    var postProgress = GetWorkProgressColor(service, (int)service.TotalPost!, service.StartDate, (int)service.CompletePost!);
                    service.DayLeftPost = postProgress.DaysLeft;

                    var postRequired = GetWorkProgressColor(service, (int)service.TotalPost!, service.StartDate, (int)service.CompletePost!);
                    service.RequiredPost = postRequired.RequiredUnit;

                    var reelProgress = GetWorkProgressColor(service, (int)service.TotalReels!, service.StartDate, (int)service.CompleteReels!);
                    service.DayLeftReels = reelProgress.DaysLeft;

                    var reelRequired = GetWorkProgressColor(service, (int)service.TotalReels!, service.StartDate, (int)service.CompleteReels!);
                    service.RequiredReels = reelRequired.RequiredUnit;

                    var backlinkProgress = GetWorkProgressColor(service, (int)service.Backlink!, service.StartDate, (int)service.CompleteBacklink!);
                    service.DayLeftBacklink = backlinkProgress.DaysLeft;

                    var backlinkRequired = GetWorkProgressColor(service, (int)service.Backlink!, service.StartDate, (int)service.CompleteBacklink!);
                    service.RequiredBacklink = backlinkRequired.RequiredUnit;

                    var clasifiedProgress = GetWorkProgressColor(service, (int)service.Clasified!, service.StartDate, (int)service.CompleteClasified!);
                    service.DayLeftClasified = clasifiedProgress.DaysLeft;

                    var clasifiedRequired = GetWorkProgressColor(service, (int)service.Clasified!, service.StartDate, (int)service.CompleteClasified!);
                    service.RequiredClasified = clasifiedRequired.RequiredUnit;

                    var socilSharingProgress = GetWorkProgressColor(service, (int)service.SocialSharing!, service.StartDate, (int)service.CompleteSocialSharing!);
                    service.DayLeftSocialSharing = socilSharingProgress.DaysLeft;

                    var socilSharingRequired = GetWorkProgressColor(service, (int)service.SocialSharing!, service.StartDate, (int)service.CompleteSocialSharing!);
                    service.RequiredSocialSharing = socilSharingRequired.RequiredUnit;


                }
            }
        }
        GetFirstMinDaySecondMinDay();
        AvgCalculation();

    }


    private void AvgCalculation()
    {
        int CompletePost = 0;
        int CompleteReels = 0;
        int CompleteBacklink = 0;
        int CompleteClassified = 0;
        int CompleteSocialSharing = 0;

        int TergetPost = 0;
        int TergetReels = 0;
        int TergetBacklink = 0;
        int TergetClassified = 0;
        int TergetSocialSharing = 0;

        double SumIntervalDays = 0;


        foreach (var project in projects)
        {
            if (project.ProjectType == ProjectType.SERVICE)
            {

                if (project.Services != null && project.Services.Any())
                {


                    foreach (var service in project.Services)
                    {

                        SumIntervalDays += DateService!.GetTotalDaysFromTodayExcludingSundays(service.StartDate);

                        CompletePost += service.CompletePost ?? 0;
                        TergetPost += service.TotalPost;

                        CompleteReels += service.CompleteReels ?? 0;
                        TergetReels += service.TotalReels;

                        CompleteBacklink += service.CompleteBacklink ?? 0;
                        TergetBacklink += service.Backlink;

                        CompleteClassified += service.CompleteClasified ?? 0;
                        TergetClassified += service.Clasified;

                        CompleteSocialSharing += service.CompleteSocialSharing ?? 0;
                        TergetSocialSharing += service.SocialSharing;
                    }
                }
            }
        }




        // Console.WriteLine("SumIntervalDays-" + SumIntervalDays);
        // double AvgCompletePost = SumIntervalDays > 0 ? (double)CompletePost / (SumIntervalDays) : 0;
        // double AvgTergetPost = SumIntervalDays > 0 ? (double)TergetPost / SumIntervalDays : 0;

        // double AvgCompleteReels = SumIntervalDays > 0 ? (double)CompleteReels / SumIntervalDays : 0;
        // double AvgTergetReels = SumIntervalDays > 0 ? (double)TergetReels / SumIntervalDays : 0;

        // double AvgCompleteBacklink = SumIntervalDays > 0 ? (double)CompleteBacklink / SumIntervalDays : 0;
        // double AvgTergetBacklink = SumIntervalDays > 0 ? (double)TergetBacklink / SumIntervalDays : 0;


        // double AvgCompleteClassified = SumIntervalDays > 0 ? (double)CompleteClassified / SumIntervalDays : 0;
        // double AvgTergetClassified = SumIntervalDays > 0 ? (double)TergetClassified / SumIntervalDays : 0;

        // double AvgCompleteSocialSharing = SumIntervalDays > 0 ? (double)CompleteSocialSharing / SumIntervalDays : 0;
        // double AvgTergetSocialSharing = SumIntervalDays > 0 ? (double)TergetSocialSharing / SumIntervalDays : 0;

        double avgDays = TotalService > 0 ? SumIntervalDays / TotalService : 0;

        Console.WriteLine("TotalService-" + (TotalService));
        Console.WriteLine("SumIntervalDays-" + (SumIntervalDays));
        Console.WriteLine("avgDays-" + (avgDays));

        double AvgCompletePost = Math.Round(avgDays) > 0 ? (double)CompletePost / Math.Round(avgDays) : 0;
        double AvgTergetPost = Math.Round(avgDays) > 0 ? (double)TergetPost / Math.Round(avgDays) : 0;

        double AvgCompleteReels = Math.Round(avgDays) > 0 ? (double)CompleteReels / Math.Round(avgDays) : 0;
        double AvgTergetReels = Math.Round(avgDays) > 0 ? (double)TergetReels / Math.Round(avgDays) : 0;

        double AvgCompleteBacklink = Math.Round(avgDays) > 0 ? (double)CompleteBacklink / Math.Round(avgDays) : 0;
        double AvgTergetBacklink = Math.Round(avgDays) > 0 ? (double)TergetBacklink / Math.Round(avgDays) : 0;


        double AvgCompleteClassified = Math.Round(avgDays) > 0 ? (double)CompleteClassified / Math.Round(avgDays) : 0;
        double AvgTergetClassified = Math.Round(avgDays) > 0 ? (double)TergetClassified / Math.Round(avgDays) : 0;

        double AvgCompleteSocialSharing = Math.Round(avgDays) > 0 ? (double)CompleteSocialSharing / Math.Round(avgDays) : 0;
        double AvgTergetSocialSharing = Math.Round(avgDays) > 0 ? (double)TergetSocialSharing / Math.Round(avgDays) : 0;

        // Compute completion percentage relative to AvgTargetPost
        CompletionPostRate = AvgTergetPost > 0 ? (AvgCompletePost / AvgTergetPost) * 100 : 0;

        // Compute completion percentage relative to AvgTargetReels
        CompletionReelsRate = AvgTergetReels > 0 ? (AvgCompleteReels / AvgTergetReels) * 100 : 0;

        // Compute completion percentage relative to AvgTargetClassified
        CompletionBacklinkRate = AvgTergetBacklink > 0 ? (AvgCompleteBacklink / AvgTergetBacklink) * 100 : 0;

        // Compute completion percentage relative to AvgTargetClassified
        CompletionClassifiedRate = AvgTergetClassified > 0 ? (AvgCompleteClassified / AvgTergetClassified) * 100 : 0;

        // Compute completion percentage relative to AvgTargetSocialSharing
        CompletionSocialSharingRate = AvgTergetSocialSharing > 0 ? (AvgCompleteSocialSharing / AvgTergetSocialSharing) * 100 : 0;

        Console.WriteLine("TergetPost-" + (double)TergetPost / 26);
        Console.WriteLine("CompletePost-" + CompletePost / Math.Round(avgDays));
        TergetAvgCalculation((TergetPost - CompletePost), (TergetReels - CompleteReels), (TergetBacklink - CompleteBacklink), (TergetClassified - CompleteClassified), (TergetSocialSharing - CompleteSocialSharing), avgDays);
        CurrentAvgCalculation(CompletePost, CompleteReels, CompleteBacklink, CompleteClassified, CompleteSocialSharing, avgDays);
    }


    private void TergetAvgCalculation(double post, double reels, double backlink, double clasified, double social, double avgDays)
    {
        TergetWorkingAvgPost = post / (26 - avgDays);
        TergetWorkingAvgReels = reels / (26 - avgDays);
        TergetWorkingAvgBackLink = backlink / (26 - avgDays);
        TergetWorkingAvgClasified = clasified / (26 - avgDays);
        TergetWorkingAvgSocialSharing = social / (26 - avgDays);

    }

    private void CurrentAvgCalculation(double post, double reels, double backlink, double clasified, double social, double avgDays)
    {
        CurrentAvgPost = post / avgDays;
        CurrentAvgReels = reels / avgDays;
        CurrentAvgBackLink = backlink / avgDays;
        CurrentAvgClasified = clasified / avgDays;
        CurrentAvgSocialSharing = social / avgDays;
    }


    private void GetFirstMinDaySecondMinDay()
    {
        allPostServices = projects
           .Where(p => p.Services != null)
           .SelectMany(p => p.Services!)
           .Where(s => s.DayLeftPost.HasValue)
           .ToList();

        PostDayLeftList = allPostServices
            .Select(s => s.DayLeftPost!.Value)
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        allReelsServices = projects
           .Where(p => p.Services != null)
           .SelectMany(p => p.Services!)
           .Where(s => s.DayLeftReels.HasValue)
           .ToList();

        ReelsDayLeftList = allReelsServices
            .Select(s => s.DayLeftReels!.Value)
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        allBacklinkServices = projects
           .Where(p => p.Services != null)
           .SelectMany(p => p.Services!)
           .Where(s => s.DayLeftBacklink.HasValue)
           .ToList();

        BackLinkDayLeftList = allBacklinkServices
            .Select(s => s.DayLeftBacklink!.Value)
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        allClasifiedServices = projects
           .Where(p => p.Services != null)
           .SelectMany(p => p.Services!)
           .Where(s => s.DayLeftClasified.HasValue)
           .ToList();

        ClasifiedDayLeftList = allClasifiedServices
            .Select(s => s.DayLeftClasified!.Value)
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        allSocialSharingServices = projects
           .Where(p => p.Services != null)
           .SelectMany(p => p.Services!)
           .Where(s => s.DayLeftSocialSharing.HasValue)
           .ToList();

        SocialSharingDayLeftList = allSocialSharingServices
            .Select(s => s.DayLeftSocialSharing!.Value)
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        // Post
        if (PostDayLeftList.Count >= 2)
        {
            int firstMin = PostDayLeftList[0];
            int secondMin = PostDayLeftList[1];

            FirstMinPost = allPostServices
                .Where(s => s.DayLeftPost == firstMin)
                .Sum(s => s.RequiredPost ?? 0);

            SecondMinPost = allPostServices
                .Where(s => s.DayLeftPost == secondMin)
                .Sum(s => s.RequiredPost ?? 0);
        }
        else if (PostDayLeftList.Count == 1)
        {
            int firstMin = PostDayLeftList[0];
            FirstMinPost = allPostServices
                .Where(s => s.DayLeftPost == firstMin)
                .Sum(s => s.RequiredPost ?? 0);
        }

        // Reels
        if (ReelsDayLeftList.Count >= 2)
        {
            int firstMin = ReelsDayLeftList[0];
            int secondMin = ReelsDayLeftList[1];

            FirstMinReels = allReelsServices
                .Where(s => s.DayLeftReels == firstMin)
                .Sum(s => s.RequiredReels ?? 0);

            SecondMinReels = allReelsServices
                .Where(s => s.DayLeftReels == secondMin)
                .Sum(s => s.RequiredReels ?? 0);
        }
        else if (ReelsDayLeftList.Count == 1)
        {
            int firstMin = ReelsDayLeftList[0];
            FirstMinReels = allReelsServices
                .Where(s => s.DayLeftReels == firstMin)
                .Sum(s => s.RequiredReels ?? 0);
        }

        // Backlink
        if (BackLinkDayLeftList.Count >= 2)
        {
            int firstMin = BackLinkDayLeftList[0];
            int secondMin = BackLinkDayLeftList[1];

            FirstMinBacklink = allBacklinkServices
                .Where(s => s.DayLeftBacklink == firstMin)
                .Sum(s => s.RequiredBacklink ?? 0);

            SecondMinBacklink = allBacklinkServices
                .Where(s => s.DayLeftBacklink == secondMin)
                .Sum(s => s.RequiredBacklink ?? 0);
        }
        else if (BackLinkDayLeftList.Count == 1)
        {
            int firstMin = BackLinkDayLeftList[0];
            FirstMinBacklink = allBacklinkServices
                .Where(s => s.DayLeftBacklink == firstMin)
                .Sum(s => s.RequiredBacklink ?? 0);
        }

        // Clasified
        if (ClasifiedDayLeftList.Count >= 2)
        {
            int firstMin = ClasifiedDayLeftList[0];
            int secondMin = ClasifiedDayLeftList[1];

            FirstMinClassified = allClasifiedServices
                .Where(s => s.DayLeftClasified == firstMin)
                .Sum(s => s.RequiredClasified ?? 0);

            SecondMinClassified = allClasifiedServices
                .Where(s => s.DayLeftClasified == secondMin)
                .Sum(s => s.RequiredClasified ?? 0);
        }
        else if (ClasifiedDayLeftList.Count == 1)
        {
            int firstMin = ClasifiedDayLeftList[0];
            FirstMinClassified = allClasifiedServices
                .Where(s => s.DayLeftClasified == firstMin)
                .Sum(s => s.RequiredClasified ?? 0);
        }

        // Social Sharing
        if (SocialSharingDayLeftList.Count >= 2)
        {
            int firstMin = SocialSharingDayLeftList[0];
            int secondMin = SocialSharingDayLeftList[1];

            FirstMinSocialSharing = allSocialSharingServices
                .Where(s => s.DayLeftSocialSharing == firstMin)
                .Sum(s => s.RequiredSocialSharing ?? 0);

            SecondMinSocialSharing = allSocialSharingServices
                .Where(s => s.DayLeftSocialSharing == secondMin)
                .Sum(s => s.RequiredSocialSharing ?? 0);
        }
        else if (SocialSharingDayLeftList.Count == 1)
        {
            int firstMin = SocialSharingDayLeftList[0];
            FirstMinSocialSharing = allSocialSharingServices
                .Where(s => s.DayLeftSocialSharing == firstMin)
                .Sum(s => s.RequiredSocialSharing ?? 0);
        }
    }

    private int GetSumByDay<T>
    (
    List<T>
        services,
        int day,
        Func<T, int?>
            daySelector,
            Func<T, int?>
                valueSelector)
    {
        return services
        .Where(s => daySelector(s) == day)
        .Sum(s => valueSelector(s) ?? 0);
    }


    private string GetDayLabel(int dayLeft)
    {
        DateTime targetDate = DateTime.Today.AddDays(+dayLeft);
        return dayLeft switch
        {
            0 => "Today",
            1 => "Tomorrow",
            _ => $"{targetDate:dd MMM yyyy}"
        };
    }



    private (string ColorClass, int DaysLeft, int RequiredUnit) GetWorkProgressColor(
    ServicesDTO service,
    int totalUnits,
    DateTime startDate,
    int completedUnits)
    {
        if (totalUnits == 0 || service.WorkTaskDetails == null)
            return ("", 0, 0);

        var breakpoints = DateService!.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);
        var interval = DateService.GetCurrentInterval(breakpoints);
        var currentInterval = DateService.GetCurrentIntervalNumber(breakpoints);
        var unit = 0;

        if (interval == null || currentInterval == null)
            return ("", 0, 0);

        int totalWorkingDays = DateService.GetTotalDaysExcludingSundays(startDate, 30);
        int daysWorkedSoFar = DateService.GetWorkingDaysBetween(startDate, DateTime.Today);
        if (daysWorkedSoFar == 0 || totalWorkingDays == 0) return ("", 0, 0);

        DateTime intervalStart = interval.Value.Start.Date;
        DateTime intervalEnd = interval.Value.End.Date;
        int daysLeft = (intervalEnd - DateTime.Today).Days;

        if (daysLeft < 0) daysLeft = 0;

        if (IsFirstInterval(breakpoints))//first interval including first day
        {
            // Console.WriteLine("first interval");
            int intervalLength = (intervalEnd - intervalStart).Days + 1;//including first day
            int todayPosition = (DateTime.Today - intervalStart).Days + 1;//including first day
            bool isLastDay = todayPosition == intervalLength;

            if (isLastDay && currentInterval > completedUnits)
            {

                // Console.WriteLine("first interval isLastDay");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("first interval if ");
                return ("medium-progress-bg", daysLeft, (int)currentInterval - completedUnits);
            }
            else if (isLastDay && currentInterval <= completedUnits)
            {

                // Console.WriteLine("first interval isLastDay");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("first interval else if ");
                return ("", 0, 0);
            }
            else
            {
                if (currentInterval <= completedUnits)
                {
                    // Console.WriteLine("first interval else => if");
                    return ("advanced-progress-bg", daysLeft, 0);
                }
                else
                {
                    // Console.WriteLine("first interval else => else");
                    return ("", daysLeft, (int)currentInterval - completedUnits);
                }
                // Console.WriteLine("first interval else");

            }

        }

        else if (currentInterval - 1 > completedUnits)//check privious pending
        {
            // Console.WriteLine("check privious pending");
            int intervalLength = (intervalEnd - intervalStart).Days;//excluding first day
            int todayPosition = (DateTime.Today - intervalStart).Days;//excluding first day
            bool isLastDay = todayPosition == intervalLength;

            if (isLastDay)
            {
                // Console.WriteLine("check privious pending if");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("check privious pending if ");
                return ("low-progress-bg", daysLeft, (int)currentInterval - completedUnits); // return privious pending + today(last day) pending
            }
            else
            {
                // Console.WriteLine("check privious pending else");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                //return ((int)currentInterval - 1) - completedUnits;// return privious pending only
                // Console.WriteLine("check privious pending else ");
                return ("low-progress-bg", daysLeft, ((int)currentInterval) - completedUnits);
            }

        }

        else// regularaty check
        {
            int intervalLength = (intervalEnd - intervalStart).Days;//excluding first day
            int todayPosition = (DateTime.Today - intervalStart).Days;//excluding first day
            bool isLastDay = todayPosition == intervalLength;
            // Console.WriteLine("regularaty check");

            if (isLastDay && currentInterval > completedUnits)
            {
                // Console.WriteLine("regularaty check if");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("regularaty check if ");
                return ("medium-progress-bg", daysLeft, (int)currentInterval - completedUnits);

            }
            else if (isLastDay && currentInterval <= completedUnits)
            {

                // Console.WriteLine("regularaty check else if");
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("regularaty check else if ");
                return ("", 0, 0);
            }
            else
            {
                // Console.WriteLine("regularaty check else ");
                // Console.WriteLine("regularaty check else");
                // return ("", daysLeft, (int)currentInterval - completedUnits);
                if (currentInterval <= completedUnits)
                {
                    // Console.WriteLine("regularaty check else => if");
                    return ("advanced-progress-bg", daysLeft, 0);
                }
                else
                {
                    // Console.WriteLine("regularaty check else => else");
                    return ("", daysLeft, (int)currentInterval - completedUnits);
                }

            }

        }

    }

    public bool IsFirstInterval(List<DateTime>
        breakpoints)
    {
        DateTime currentDate = DateTime.Today;

        if (breakpoints.Count >= 2)
        {
            DateTime start = breakpoints[0].Date;
            DateTime end = breakpoints[1].Date;
            if (currentDate >= start && currentDate <= end)
            {
                return true;
            }
        }

        return false;
    }






    private bool MetricMatch(WorkTaskDetailsDto w, WorkMetricType metricType)
    {
        return metricType switch
        {
            WorkMetricType.SharedPost => w.SharedPost > 0,
            WorkMetricType.CreatedReels => w.CreatedReels > 0,
            WorkMetricType.Backlink => w.Backlink > 0,
            WorkMetricType.Clasified => w.Clasified > 0,
            WorkMetricType.SocialSharing => w.SocialSharing > 0,
            _ => false
        };
    }
}
