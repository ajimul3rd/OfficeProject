@page "/login"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using OfficeProject.Authentication
@using OfficeProject.Models.DTO
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ApiService ApiService
@inject IDataSerializer? DataSerializer
@rendermode InteractiveServer

<div class="container-fluid vh-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-md-8 col-lg-6 col-xl-4">
            <div class="card shadow-lg" style="border-radius: 1rem;">
                <div class="card-body p-5 text-center">

                    <div class="mb-4">
                        <i class="fas fa-building fa-3x text-primary mb-3"></i>
                        <h2 class="fw-bold mb-2">Office System Login</h2>
                        <p class="text-muted">Please enter your credentials</p>
                    </div>

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="form-floating mb-4">
                            <InputText id="userName" @bind-Value="loginModel.UserName"
                            class="form-control form-control-lg" placeholder="Username" />
                            <label for="userName" class="form-label">Username</label>
                            <ValidationMessage For="@(() => loginModel.UserName)" class="text-danger small" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="password" type="password" @bind-Value="loginModel.UserPassword"
                            class="form-control form-control-lg" placeholder="Password" />
                            <label for="password" class="form-label">Password</label>
                            <ValidationMessage For="@(() => loginModel.UserPassword)" class="text-danger small" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                                @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            </div>
                        }

                        <button type="submit" class="btn btn-primary btn-lg btn-block w-100 mb-4" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Authenticating...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>

                        <div class="text-center text-muted mt-3">
                            <small>Don't have an account? <a href="#" class="text-primary">Contact admin</a></small>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
    background-color: #f8f9fa;
    }

    .card {
    border: none;
    overflow: hidden;
    }

    .form-control {
    border-radius: 0.5rem;
    }

    .btn-primary {
    background-color: #0d6efd;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    }

    .btn-primary:hover {
    background-color: #0b5ed7;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    [Inject] private IGlobalDataService? GlobalDataService { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                // loginModel = new LoginModel();
                StateHasChanged();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loginModel = new LoginModel
            {
            //UserName = "Ajay",
               // UserPassword = "admin123" //Set default password here
            };
        await base.OnInitializedAsync();
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var loginResponse = await ApiService.LoginAsync(loginModel);

            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.AccessToken))
            {
                await LocalStorage.SetItemAsync("authToken", loginResponse.AccessToken);
                await LocalStorage.SetItemAsync("refreshToken", loginResponse.RefreshToken);

                if (AuthStateProvider is CustomAuthStateProvider authProvider)
                {
                    await authProvider.NotifyUserAuthentication(loginResponse.AccessToken);
                }
                GlobalDataService!.Clear();//clear global data
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Server error: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}