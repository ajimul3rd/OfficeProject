@page "/upload-excel"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using ClosedXML.Excel
@inject IDataSerializer? DataSerializer

<style>
    /* Modern UI Styles */
    .upload-container {
    max-width: 80vw;
    margin: 2rem auto;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    font-family: 'Segoe UI', system-ui, sans-serif;
    }

    .upload-header {
    color: #2c3e50;
    margin-bottom: 1.5rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    }

    .upload-header i {
    color: #1d6f42;
    font-size: 1.5rem;
    }

    .file-upload-box {
    border: 2px dashed #d1d5db;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    margin-bottom: 1.5rem;
    transition: all 0.2s;
    background: #f9fafb;
    position: relative;
    }

    .file-upload-box:hover {
    border-color: #3b82f6;
    background: #f0f7ff;
    }

    .file-upload-box input {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
    }

    .upload-icon {
    font-size: 2.5rem;
    color: #3b82f6;
    margin-bottom: 1rem;
    }

    .upload-instructions {
    color: #4b5563;
    margin-bottom: 0.5rem;
    }

    .upload-note {
    color: #9ca3af;
    font-size: 0.875rem;
    }

    /* File info panel */
    .file-info-panel {
    background: #f8fafc;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border: 1px solid #e2e8f0;
    }

    .file-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    }

    .file-icon {
    font-size: 1.75rem;
    color: #1d6f42;
    }

    .file-details {
    flex-grow: 1;
    }

    .file-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
    }

    .sheet-selector {
    margin-bottom: 1.5rem;
    }

    .stats-badges {
    display: flex;
    gap: 0.75rem;
    }

    .badge {
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.875rem;
    }

    .badge-primary {
    background: #e0f2fe;
    color: #0369a1;
    }

    .badge-secondary {
    background: #e5e7eb;
    color: #4b5563;
    }

    /* Table styles */
    .data-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .data-table thead th {
    background: #1d6f42;
    color: white;
    padding: 0.75rem 1rem;
    font-weight: 500;
    text-align: left;
    }

    .data-table tbody tr:nth-child(even) {
    background: #f9fafb;
    }

    .data-table tbody td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #e5e7eb;
    }

    /* Alert styles */
    .alert {
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    }

    .alert-info {
    background: #e0f2fe;
    color: #0369a1;
    border-left: 4px solid #0369a1;
    }

    .alert-error {
    background: #fee2e2;
    color: #b91c1c;
    border-left: 4px solid #b91c1c;
    }

    /* Loading spinner */
    .spinner-container {
    display: flex;
    justify-content: center;
    padding: 2rem;
    }

    .spinner {
    width: 3rem;
    height: 3rem;
    border: 4px solid rgba(59, 130, 246, 0.2);
    border-radius: 50%;
    border-top-color: #3b82f6;
    animation: spin 1s linear infinite;
    }

    @@keyframes spin {
    100% {
    transform: rotate(360deg);
    }
    }
</style>

<div class="upload-container">
    <h3 class="upload-header">
        <i class="fas fa-file-excel"></i> Upload Excel File Here!
    </h3>

    <div class="file-upload-box">
        <div class="upload-icon">
            <i class="fas fa-file-upload"></i>
        </div>
        <p class="upload-instructions">Drag & drop your Excel file here or click to browse</p>
        <p class="upload-note">Supports .xlsx files only (max 10MB)</p>
        <InputFile OnChange="OnFileChange" accept=".xlsx" />
    </div>

    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner"></div>
        </div>
    }

    @if (message != null)
    {
        <div class="alert @(message.Contains("Error") ? "alert-error" : "alert-info")">
            <i class="@(message.Contains("Error") ? "fas fa-exclamation-circle" : "fas fa-info-circle")"></i>
            @message
        </div>
    }

    @if (excelData != null && !isLoading)
    {
        <div class="file-info-panel">
            <div class="file-meta">
                <div class="file-icon">
                    <i class="fas fa-file-excel"></i>
                </div>
                <div class="file-details">
                    <div class="file-name">@fileName</div>
                    <div class="stats-badges">
                        <span class="badge badge-secondary">@workbook?.Worksheets.Count sheets</span>
                    </div>
                </div>
            </div>

            <div class="sheet-selector">
                <label class="form-label">Select Sheet:</label>
                <select @onchange="OnSheetChanged" class="form-select">
                    @for (int i = 0; i < sheetNames.Count; i++)
                    {
                        <option value="@i">@sheetNames[i]</option>
                    }
                </select>
            </div>

            <div class="stats-badges">
                <span class="badge badge-primary">Rows: @excelData.Rows.Count</span>
                <span class="badge badge-primary">Columns: @excelData.Headers.Count</span>
            </div>
        </div>

        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        @foreach (var header in excelData.Headers)
                        {
                            <th>@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in excelData.Rows)
                    {
                        <tr>
                            @foreach (var cell in row)
                            {
                                <td>@cell</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    string? message;
    ExcelData? excelData;
    string fileName = string.Empty;
    List<string> sheetNames = new();
    int selectedSheetIndex = 0;
    IXLWorkbook? workbook;
    bool isLoading = false;

    class ExcelData
    {
        public List<string> Headers { get; set; } = new();
        public List<List<string>> Rows { get; set; } = new();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        isLoading = true;
        message = null;
        excelData = null;
        sheetNames.Clear();
        fileName = string.Empty;
        StateHasChanged();

        try
        {
            var file = e.File;
            fileName = file.Name;

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            workbook = new XLWorkbook(memoryStream);

            // Get all sheet names
            sheetNames = workbook.Worksheets.Select(ws => ws.Name).ToList();

            // Load first sheet by default
            if (sheetNames.Count > 0)
            {
                await LoadSheetData();
                message = $"File loaded successfully";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSheetChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newIndex))
        {
            isLoading = true;
            StateHasChanged();

            selectedSheetIndex = newIndex;
            await LoadSheetData();

            isLoading = false;
            StateHasChanged();
        }
    }

    // private Task LoadSheetData()
    // {
    //     if (workbook == null || selectedSheetIndex < 0 || selectedSheetIndex >= sheetNames.Count)
    //         return Task.CompletedTask;

    //     try
    //     {
    //         var worksheet = workbook.Worksheet(selectedSheetIndex + 1); 1-based index
    //         var range = worksheet.RangeUsed();
    //         var data = new ExcelData();

    //         if (range != null)
    //         {
    //             Read headers (first row)
    //             var firstRow = range.FirstRow();
    //             foreach (var cell in firstRow.Cells())
    //             {
    //                 data.Headers.Add(cell.Value.ToString());
    //             }

    //             Read data rows (skip first row if it contains headers)
    //             foreach (var row in range.Rows().Skip(1))
    //             {
    //                 var rowData = new List<string>();
    //                 var rowDict = new Dictionary<string, string>();
    //                 foreach (var cell in row.Cells())
    //                 {
    //                     rowData.Add(cell.Value.ToString());
    //                 }
    //                 data.Rows.Add(rowData);
    //                 DataSerializer.Serializer(rowData, "ExcelFilesReader:LoadSheetData");


    //             }
    //         }

    //         excelData = data;
    //     }
    //     catch (Exception ex)
    //     {
    //         message = $"Error loading sheet '{sheetNames[selectedSheetIndex]}': {ex.Message}";
    //     }

    //     return Task.CompletedTask;
    // }
    private Task LoadSheetData()
    {
        if (workbook == null || selectedSheetIndex < 0 || selectedSheetIndex >= sheetNames.Count)
            return Task.CompletedTask;

        try
        {
            var worksheet = workbook.Worksheet(selectedSheetIndex + 1);
            var range = worksheet.RangeUsed();
            var data = new ExcelData();

            if (range != null)
            {
                // Read headers (first row)
                var firstRow = range.FirstRow();
                foreach (var cell in firstRow.Cells())
                {
                    data.Headers.Add(cell.Value.ToString());
                }

                // Read data rows (skip first row if it contains headers)
                foreach (var row in range.Rows().Skip(1))
                {
                    var rowData = new List<string>();
                    var rowDict = new Dictionary<string, string>();
                    
                    for (int i = 0; i < data.Headers.Count; i++)
                    {
                        var cell = row.Cell(i + 1); // Cells are 1-based
                        rowDict[data.Headers[i]] = cell.Value.ToString();
                    }
                    
                    data.Rows.Add(rowDict.Values.ToList());
                    DataSerializer.Serializer(rowDict, "ExcelFilesReader:LoadSheetData");
                }
            }

            excelData = data;
        }
        catch (Exception ex)
        {
            message = $"Error loading sheet '{sheetNames[selectedSheetIndex]}': {ex.Message}";
        }

        return Task.CompletedTask;
    }
}