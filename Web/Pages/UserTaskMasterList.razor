@page "/task-source"
@using OfficeProject.Models.Entities
@inject IDataSerializer? DataSerializer
@inject ApiService ApiService
<AuthorizeView>
    <Authorized>

        <div class="container-fluid">

            @if (UserTask == null)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-3">Loading user task...</span>
                </div>
            }
            else if (!showHeader)
            {
                {
                    <div class="mb-3 d-flex align-items-center gap-2" style="max-width: 400px;">
                        @if (!isAddingNew)
                        {
                            @* <select class="form-select flex-grow-1" @onchange="OnSelectionChanged"> *@

                            <select class="form-select flex-grow-1" @bind="SelectedTaskId">

                                <option value="">-- Select Task --</option>
                                @foreach (var data in UserTask)
                                {
                                    <option value="@data.UserTaskId">@data.UserTaskName</option>
                                }
                               
                            </select>
                            <button class="btn btn-outline-primary" type="button" @onclick="()=>isAddingNew=true" title="Add new task">
                                +
                            </button>
                        }
                        else
                        {
                            <input type="text" class="form-control flex-grow-1" placeholder="Enter new task"
                                   @bind="newTask" @onkeydown="HandleKeyDown" />
                            <button class="btn btn-success" @onclick="AddNewTask" disabled="@string.IsNullOrWhiteSpace(newTask)">
                                Save
                            </button>
                            <button class="btn btn-secondary" type="button" @onclick="CancelAdd">
                                Cancel
                            </button>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert" style="max-width:400px;">
                            @successMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert" style="max-width:400px;">
                            @errorMessage
                        </div>
                    }
                }
            }
            else
            {
                <!-- Full Admin UI -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3 mb-0">
                        <i class="fas fa-users-cog me-2 text-primary"></i>
                        User Tasks Manager
                    </h1>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-white">
                        <h5 class="mb-0">Manage User Tasks</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                @if (!isAddingNew)
                                {
                                    <div class="input-group mb-3">
                                        <select class="form-select" @onchange="OnSelectionChanged">
                                            <option value="">-- Select Task--</option>
                                            @foreach (var data in UserTask)
                                            {
                                                <option value="@data.UserTaskId">@data.UserTaskName</option>
                                            }
                                        </select>
                                        <button class="btn btn-primary" @onclick="() => isAddingNew = true">
                                            <i class="fas fa-plus me-1"></i> Add New
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" placeholder="Enter new Task"
                                               @bind="newTask" @onkeydown="HandleKeyDown" />
                                        <button class="btn btn-success" @onclick="AddNewTask" disabled="@string.IsNullOrWhiteSpace(newTask)">
                                            <i class="fas fa-save me-1"></i> Save
                                        </button>
                                        <button class="btn btn-outline-secondary" @onclick="CancelAdd">
                                            <i class="fas fa-times me-1"></i> Cancel
                                        </button>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(successMessage))
                                {
                                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                                        <i class="fas fa-check-circle me-2"></i> @successMessage
                                        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                                        <i class="fas fa-exclamation-circle me-2"></i> @errorMessage
                                        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Available User Task</h5>
                        <span class="badge bg-primary">@UserTask.Count Total</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                            <table class="table table-bordered table-sm custom-tight-table mb-0">
                                <thead class="table-info sticky-header">
                                    <tr>
                                        <th>ID</th>
                                        <th>Tasks</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var userTask in UserTask)
                                    {
                                        <tr>
                                            <td>@userTask.UserTaskId</td>
                                            <td>@userTask.UserTaskName</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditTaske(userTask)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTask(userTask)">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>

                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
        <style>
            .sticky-header th {
                position: sticky;
                top: 0;
                background-color: #e0f3ff; /* or any header color */
                z-index: 2;
            }</style>

    </Authorized>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>
</AuthorizeView>
@code {
   
    [Parameter] public string SelectedTask { get; set; }

    [Parameter] public EventCallback<string> SelectedTaskChanged { get; set; }

    [Parameter] public bool showHeader { get; set; } = true;

    [Inject] private NavigationManager Navigation { get; set; } = null!;

    private List<UserTaskMaster> UserTask;

    private bool isAddingNew = false;

    private string newTask;

    private string errorMessage;

    private string successMessage;

    private UserTaskMaster? taskToEdit;


    protected override async Task OnInitializedAsync()
    {
        await LoadUserTask();
    }

    private int? SelectedTaskId
    {
        get
        {
            var selected = UserTask?.FirstOrDefault(cs => cs.UserTaskName == SelectedTask);
            return selected?.UserTaskId;
        }
        set
        {
            if (value == null)
            {
                SelectedTaskChanged.InvokeAsync(null);
            }
            else
            {
                var selected = UserTask?.FirstOrDefault(cs => cs.UserTaskId == value);
                if (selected != null)
                {
                    SelectedTaskChanged.InvokeAsync(selected.UserTaskName);
                }
            }
        }
    }

    private async Task LoadUserTask()
    {
        try
        {
            UserTask = await ApiService.GetUserTasksMasterAsync();
            isAddingNew = false;
            newTask = null;
            errorMessage = null;
            successMessage = null;
            taskToEdit = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load user task: {ex.Message}";
        }
    }

    private async void OnSelectionChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value == "new")
        {
            isAddingNew = true;
            await SelectedTaskChanged.InvokeAsync(null);
        }
        else if (int.TryParse(value, out int id))
        {
            var selected = UserTask.FirstOrDefault(cs => cs.UserTaskId == id);
            if (selected != null)
            {
                await SelectedTaskChanged.InvokeAsync(selected.UserTaskName);
            }
        }
        else
        {
            await SelectedTaskChanged.InvokeAsync(null);
        }

        errorMessage = null;
        successMessage = null;
    }

    private async Task AddNewTask()
    {
        if (string.IsNullOrWhiteSpace(newTask))
        {
            errorMessage = "Please enter a task for future use.";
            return;
        }

        try
        {


            var data = new UserTaskMaster { UserTaskName = newTask };

            await ApiService.AddOrUpdateUserTasksMasterAsync(data);
            successMessage = $"User task '{newTask}' added successfully!";
            await LoadUserTask();
            newTask = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving user taks: {ex.Message}";
        }
    }

    private void CancelAdd()
    {
        isAddingNew = false;
        newTask = null;
        errorMessage = null;
        successMessage = null;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTask))
        {
            await AddNewTask();
        }
        else if (e.Key == "Escape")
        {
            CancelAdd();
        }
    }

    private void EditTaske(UserTaskMaster task)
    {
        taskToEdit = task;
        newTask = task.UserTaskName;
        isAddingNew = true;
    }

    private async Task DeleteTask(UserTaskMaster task)
    {
        try
        {
            await ApiService.DeleteUserTaskMasterAsync(task.UserTaskId);
            successMessage = $"Uses Task '{task.UserTaskName}' deleted successfully!";
            await LoadUserTask();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting task: {ex.Message}";
        }
    }
}
<style>
    .container-fluid {
        padding-right: 0;
        padding-left: 0;
    }
</style>