@page "/add-project"
@using OfficeProject.Models.DTO
@using System.Text.Json
@using OfficeProject.Web.Pages.DialogModel
@inject ApiService api
@inject IDataSerializer? DataSerializer
@using OfficeProject.Models.Enums

<AuthorizeView Context="outerAuthContext">
    <Authorized>
        <h3 class="mb-3">Project List</h3>

        <div class="row g-2 align-items-end mb-3">

            <!-- Filters -->
            <div class="col-lg-3 col-md-4 col-sm-6">
                <label class="form-label mb-1">Client Name</label>
                <input class="form-control form-control-sm"
                       placeholder="Search Client Name"
                       @bind="searchClientName"
                       @bind:event="oninput" />
            </div>

            <div class="col-lg-3 col-md-4 col-sm-6">
                <label class="form-label mb-1">Service Name</label>
                <input class="form-control form-control-sm"
                       placeholder="Search Service Name"
                       @bind="searchServiceName"
                       @bind:event="oninput" />
            </div>

            <div class="col-lg-3 col-md-4 col-sm-6">
                <label class="form-label mb-1">Status</label>
                <select class="form-select form-select-sm" @bind="filterStatus">
                    <option value="">All</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>

            <!-- Action Buttons -->
            <div class="col-lg-3 col-md-12 d-flex gap-2 justify-content-lg-end justify-content-md-start mt-2 mt-lg-0">
                <button type="button" class="btn btn-primary btn-sm flex-grow-1 flex-lg-grow-0" @onclick="AddProject">
                    <i class="fas fa-plus me-1"></i> Add Project
                </button>
                <button type="button" class="btn btn-secondary btn-sm flex-grow-1 flex-lg-grow-0" @onclick="AddExtraServices">
                    <i class="fas fa-plus me-1"></i> Add Extra Service
                </button>

            </div>

        </div>



        @if (FilteredProjects.Any())
        {
            <table class="table table-bordered">
                <thead class="table-info sticky-header">
                    <tr>
                        <th>P_ID</th>
                        <th>Project Name</th>
                        <AuthorizeView Roles="ADMIN,MANAGER">
                            <th class ="text-center">Working Status</th>
                            <th class="text-center">Project Cost</th>
                        </AuthorizeView>
                        <th class="text-center">Total Services</th>
                        <AuthorizeView Roles="ADMIN,MANAGER">
                            <th class="text-center">Status</th>
                            <th class="text-center">Actions</th>
                           
                        </AuthorizeView>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var project in FilteredProjects)
                    {
                        <tr>
                            <td>@project.ProjectId</td>
                            <td>
                                @project.ProjectName
                                @if (project.ProjectType == ProjectType.SERVICE)
                                {
                                    <span class="text-muted ms-1">(Service)</span>
                                }
                                else
                                {
                                    <span class="ms-1 fw-bold text-primary">(Extra Service)</span>
                                }
                            </td>
                            <td class="text-center">
                                <span class="@(project.IsUserWorkDone ? "badge-complete" : "badge-running")"
                                      @onclick="() => PushProjectOnTeam(project.ProjectId, !project.IsUserWorkDone)"
                                    @onclick:stopPropagation>
                                        @(project.IsUserWorkDone ? "Complete" : "Running")
                                </span>
                            </td>

                            <AuthorizeView Roles="ADMIN,MANAGER">
                                <td class="text-center">@project.ProjectCost.ToString("c", new System.Globalization.CultureInfo("en-IN"))</td>
                            </AuthorizeView>
                            <td class="text-center">@(project.Services?.Count ?? 0)</td>
                            <AuthorizeView Roles="ADMIN,MANAGER">
                                <td class="text-center">
                                    <button class="btn btn-sm @(project.IsActive ? "btn-success" : "btn-danger")"
                                            @onclick="() => ToggleProjectStatus(project.ProjectId, !project.IsActive)" @onclick:stopPropagation>
                                        @(project.IsActive ? "Active" : "Inactive")
                                    </button>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-primary btn-sm" @onclick="@(() => EditProject(project))" @onclick:stopPropagation>Edit</button>
                                </td>

                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No projects available.</p>
        }
        @if (showProjectModal)
        {

        <DialogAddProject project="data"
                          OnProjectAdded="ReloadProjects"
                          iSNewFormData="iSNewFormData"
                          showModal="@showProjectModal" />}

        @if (ExtraServiceModal){

        <DialogAddExtreServices project="data"
                                OnProjectAdded="ReloadProjects"
                                iSNewFormData="iSNewFormData"
                                ExtraServiceModal="@ExtraServiceModal" />

        }

        <style>
            .hover-row:hover {
                background-color: #f5f5f5;
            }

            .badge-complete {
                background-color: #28a745; /* green */
                color: white;
                padding: 0.25rem 0.5rem;
                border-radius: 0.25rem;
            }

            .badge-running {
                background-color: #ffc107; /* yellow */
                color: black;
                padding: 0.25rem 0.5rem;
                border-radius: 0.25rem;
            }

            .text-center {
                text-align: center;
                vertical-align: middle;
            }

            .btn-icon-center {
                display: inline-flex;
                justify-content: center;
                align-items: center;
                padding: 0.375rem; /* adjust as needed for spacing */
            }

            .badge-complete,
            .badge-running {
                cursor: pointer;
            }

        </style>
    </Authorized>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ProjectsDTO> projects = new();

    private ProjectsDTO data;

    [Inject] private NavigationManager Navigation { get; set; } = null!;


    @inject IProjectsService projectsService

    private string errorMessage = string.Empty;

    private bool showProjectModal { get; set; } = false;

    private bool iSNewFormData { get; set; } = false;

    private List<AssignedUsersDTO> PreeAssignedUsers { get; set; }

    private List<AssignedUsersDTO> ExtraServicesPreeAssignedUsers { get; set; }

    private bool ExtraServiceModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();

        await GetCurrentLoggedUsersWithPreAssignedAsync();

    }
    private async Task LoadProjects()
    {
        projects = await api.GetAllProjectAsync();
        StateHasChanged();
    }


    private async Task GetCurrentLoggedUsersWithPreAssignedAsync()
    {
        var currentUser = await api.GetCurrentLoggedUserAsync();
        var preAssignUsers = await api.GetPreeAssignUsersAsync();

        var combined = new List<UserDTO>();

        if (preAssignUsers != null && preAssignUsers.Any())
        {
            combined.AddRange(preAssignUsers);
        }
        PreeAssignedUsers = combined.Select(u => new AssignedUsersDTO
            {
                UserId = u.UserId,
                UserName = u.UserName,
                Role = u.Role.ToString(),
            }).ToList();


        if (currentUser != null)
        {
            combined.Add(currentUser);
        }

        // Remove duplicates based on UserId
        var distinctUsers = combined
            .GroupBy(u => u.UserId)
            .Select(g => g.First())
            .ToList();

        var AssignedUsersDTO = new List<AssignedUsersDTO>();

        // Map to AssignedUsersDTO
        ExtraServicesPreeAssignedUsers = distinctUsers.Select(u => new AssignedUsersDTO
            {
                UserId = u.UserId,
                UserName = u.UserName,
                Role = u.Role.ToString(),
            }).ToList();


    }
    private string searchClientName = string.Empty;
    private string searchServiceName = string.Empty;
    private string filterStatus = string.Empty;

    private IEnumerable<ProjectsDTO> FilteredProjects =>
      projects == null
          ? Enumerable.Empty<ProjectsDTO>()
          : projects
              .Where(p =>
                  (string.IsNullOrWhiteSpace(searchClientName) ||
                   (p.Client?.ClientName?.Contains(searchClientName, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                  (string.IsNullOrWhiteSpace(searchServiceName) ||
                   (p.Services?.Any(s => s.ServiceName?.Contains(searchServiceName, StringComparison.OrdinalIgnoreCase) ?? false) ?? false)) &&
                  (string.IsNullOrWhiteSpace(filterStatus) ||
                   p.IsActive.ToString().Equals(filterStatus, StringComparison.OrdinalIgnoreCase)));


    private async Task ReloadProjects(bool isSuccess)
    {
        Console.WriteLine(isSuccess);
        if (isSuccess)
        {
            await LoadProjects(); // Refresh the project list
            StateHasChanged();   // Force UI update
        }
        else
        {
            showProjectModal = false;
            ExtraServiceModal = false;
        }
    }
    private void AddProject()
    {
        data = new ProjectsDTO(); // Reset form for new project
        data.AssignedUsers = PreeAssignedUsers;
        showProjectModal = true;
        iSNewFormData = true;
        StateHasChanged();
    }


    private void AddExtraServices()
    {
        data = new ProjectsDTO();
        data.AssignedUsers = new List<AssignedUsersDTO>();
        data.AssignedUsers = data.AssignedUsers
            .Concat(ExtraServicesPreeAssignedUsers ?? new List<AssignedUsersDTO>())
            .GroupBy(u => u.UserId)
            .Select(g => g.First())
            .ToList();

        ExtraServiceModal = true;
        iSNewFormData = true;
        StateHasChanged();
    }


    private void EditProject(ProjectsDTO project)
    {

        data = project;
        data.AssignedUsers = data.AssignedUsers
            .Concat(PreeAssignedUsers)
            .GroupBy(u => u.UserId)
            .Select(g => g.First())
            .ToList();
        showProjectModal = true;
        iSNewFormData = false;
        StateHasChanged();
    } 
    
    private async Task PushProjectOnTeam(int? projectId, bool newStatus)
    {

        showProjectModal = false;
        try
        {
            var project = await projectsService.GetProjectDTOById((int)projectId!);
            if (project != null)
            {
                project.IsUserWorkDone = newStatus;
                await projectsService.PushProjectToTeamAsync(project);
                await LoadProjects();

            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating user status: {ex.Message}";
        }

    }

    

    private async Task ToggleProjectStatus(int? projectId, bool newStatus)
    {
        showProjectModal = false;
        try
        {
            var project = await projectsService.GetProjectDTOById((int)projectId!);
            if (project != null)
            {
                project.IsActive = newStatus;
                await projectsService.UpdateProjectAsync(project);
                await LoadProjects();

            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating user status: {ex.Message}";
        }
    }
}
