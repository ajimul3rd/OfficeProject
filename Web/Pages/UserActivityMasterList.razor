@page "/working-activity"
@using OfficeProject.Models.DTO
@using OfficeProject.Models.Entities
@using OfficeProject.Web.Pages.DialogModel
@inject IDataSerializer? DataSerializer
<AuthorizeView>
    <Authorized>

<div class="container-fluid">

    @if (userWorkingActivity == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="ms-3">Loading User Working Activity...</span>
        </div>
    }
    else if (!showHeader)
    {
        {
            <div class="mb-3 d-flex align-items-center gap-2" style="max-width: 400px;">
                @if (!isAddingNew)
                {
                    <select class="form-select flex-grow-1" @onchange="OnSelectionChanged">
                        <option value="">-- Select User Working Activity --</option>
                        @foreach (var data in userWorkingActivity)
                        {
                            <option value="@data.MasterId">@data.MasterActivityName</option>
                        }
                        <option value="new">+ Add new...</option>
                    </select>
                    <button class="btn btn-outline-primary" @onclick="()=>isAddingNew=true" title="Add new Activity">
                        +
                    </button>
                }
                else
                {
                    <input type="text" class="form-control flex-grow-1" placeholder="Enter new user working activity"
                           @bind="newWorkingActivityName" @onkeydown="HandleKeyDown" />
                    <button class="btn btn-success" @onclick="AddNewUserWorkingActivity" disabled="@string.IsNullOrWhiteSpace(newWorkingActivityName)">
                        Save
                    </button>
                    <button class="btn btn-secondary" @onclick="CancelAdd">
                        Cancel
                    </button>
                }
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert" style="max-width:400px;">
                    @successMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert" style="max-width:400px;">
                    @errorMessage
                </div>
            }
        }
    }
    else
    {
        <!-- Full Admin UI -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">
                <i class="fas fa-users-cog me-2 text-primary"></i>
                User Working Activity Manager
            </h1>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white">
                <h5 class="mb-0">Manage User Working Activity</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        @if (!isAddingNew)
                        {
                            <div class="input-group mb-3">
                                <select class="form-select" @onchange="OnSelectionChanged">
                                    <option value="">-- Select User Working Activity --</option>
                                    @foreach (var data in userWorkingActivity)
                                    {
                                        <option value="@data.MasterId">@data.MasterActivityName</option>
                                    }
                                </select>
                                <button class="btn btn-primary" @onclick="() => isAddingNew = true">
                                    <i class="fas fa-plus me-1"></i> Add New Activity
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" placeholder="Enter new User Working Activity Name"
                                       @bind="newWorkingActivityName" @onkeydown="HandleKeyDown" />
                                <button class="btn btn-success" @onclick="AddNewUserWorkingActivity" disabled="@string.IsNullOrWhiteSpace(newWorkingActivityName)">
                                    <i class="fas fa-save me-1"></i> Save
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="CancelAdd">
                                    <i class="fas fa-times me-1"></i> Cancel
                                </button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                                <i class="fas fa-check-circle me-2"></i> @successMessage
                                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i> @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Available User Working Activity</h5>
                <span class="badge bg-primary">@userWorkingActivity.Count Total</span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-bordered table-sm custom-tight-table mb-0">
                        <thead class="table-info sticky-header">
                            <tr>
                                <th>ID</th>
                                <th>Activity Name</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var data in userWorkingActivity)
                            {
                                <tr>
                                    <td>@data.MasterId</td>
                                    <td>@data.MasterActivityName </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditActivity(data)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteActivity(data)">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>
<style>
    .sticky-header th {
        position: sticky;
        top: 0;
        background-color: #e0f3ff; /* or any header color */
        z-index: 2;
    }</style>






    </Authorized>
<NotAuthorized>
    @{
            Navigation.NavigateTo("/login", replace: true);
        }
</NotAuthorized>
</AuthorizeView>
@code {
    [Inject] public IUserActivityMasterService UserActivityMasterService { get; set; }

    [Parameter] public string SelectedActivityName { get; set; }

    [Parameter] public EventCallback<string> SelectedActivityNameChanged { get; set; }

    [Parameter] public bool showHeader { get; set; } = true;

    private List<UserActivityMasterDto> userWorkingActivity;

    private bool isAddingNew = false;

    private string newWorkingActivityName;

    private string errorMessage;

    private string successMessage;

    private UserActivityMasterDto? ActivityToEdit;

    [Inject] private NavigationManager Navigation { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserWorkingActivityList();
    }

    private async Task LoadUserWorkingActivityList()
    {
        try
        {
            userWorkingActivity = await UserActivityMasterService.GetAllUserActivityList();
            isAddingNew = false;
            newWorkingActivityName = null;
            errorMessage = null;
            successMessage = null;
            ActivityToEdit = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load user working activity: {ex.Message}";
        }
    }

    private async void OnSelectionChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value == "new")
        {
            isAddingNew = true;
            await SelectedActivityNameChanged.InvokeAsync(null);
        }
        else if (int.TryParse(value, out int id))
        {
            var selected = userWorkingActivity.FirstOrDefault(cs => cs.MasterId == id);
            if (selected != null)
            {
                await SelectedActivityNameChanged.InvokeAsync(selected.MasterActivityName);
            }
        }
        else
        {
            await SelectedActivityNameChanged.InvokeAsync(null);
        }

        errorMessage = null;
        successMessage = null;
    }

    private async Task AddNewUserWorkingActivity()
    {
        if (string.IsNullOrWhiteSpace(newWorkingActivityName))
        {
            errorMessage = "Please enter a activity name for the user working activity.";
            return;
        }

        try
        {


            var data = new UserActivityMasterDto { MasterActivityName = newWorkingActivityName };
            await UserActivityMasterService.AddOrUpdateGetUserActivityList(data);
            successMessage = $"User working activity '{newWorkingActivityName}' added successfully!";
            await LoadUserWorkingActivityList();
            newWorkingActivityName = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving working activity: {ex.Message}";
        }
    }

    private void CancelAdd()
    {
        isAddingNew = false;
        newWorkingActivityName = null;
        errorMessage = null;
        successMessage = null;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newWorkingActivityName))
        {
            await AddNewUserWorkingActivity();
        }
        else if (e.Key == "Escape")
        {
            CancelAdd();
        }
    }

    private void EditActivity(UserActivityMasterDto data)
    {
        ActivityToEdit = data;
        newWorkingActivityName = data.MasterActivityName;
        isAddingNew = true;
    }

    private async Task DeleteActivity(UserActivityMasterDto data)
    {
        try
        {
            await UserActivityMasterService.Delete((int)data.MasterId );
            successMessage = $"User working activity'{data.MasterActivityName}' deleted successfully!";
            await LoadUserWorkingActivityList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting user working activity: {ex.Message}";
        }
    }

}
<style>
    .container-fluid {
        padding-right: 0;
        padding-left: 0;
    }
</style>