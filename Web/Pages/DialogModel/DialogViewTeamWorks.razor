@using OfficeProject.Models.DTO
@inject IDataSerializer DataSerializer
@inject IUserService userService
@inject IProjectsService ProjectsService
@inject IJSRuntime JSRuntime
@inject IWorkTaskDetailsService WorkTaskDetailsService




@if (ShowTeamWork)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content" style="height: 90vh;">
                <div class="modal-header bg-primary text-white py-3">
                    <h5 class="modal-title">Team Member Work Tasks</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseFormDialog" aria-label="Close"></button>
                </div>

                <div class="modal-body d-flex flex-column">
                    <!-- Search and Filter Section -->
                    <div class="card shadow-sm mb-4">
                        <div class="card-body">
                            <div class="row g-3 align-items-end">
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">Select Team Member</label>
                                    <div class="input-group">
                                        <InputSelect @bind-Value="selectedUserId" class="form-select" >
                                            <option value="">-- Select User --</option>
                                            @foreach (var user in users)
                                            {
                                                <option value="@user.UserId">@user.UserName (ID: @user.UserId)</option>
                                            }
                                        </InputSelect>
                                        <button class="btn btn-primary" @onclick="GetData" disabled="@(!selectedUserId.HasValue || isLoading)">
                                            @if (isLoading)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-search me-2"></i>
                                            }
                                            Search
                                        </button>
                                    </div>
                                </div>
                                <div class="col-md-6 text-md-end">
                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-outline-secondary" @onclick="ResetFilters">
                                            <i class="fas fa-redo me-2"></i>Reset
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Status Cards -->
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="card bg-light-success border-0 h-100">
                                <div class="card-body py-3">
                                    <div class="d-flex align-items-center">
                                        <div class="bg-success bg-opacity-10 p-3 rounded me-3">
                                            <i class="fas fa-tasks text-success fs-4"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Total Tasks</h6>
                                            <h4 class="mb-0">@workTasks.Count</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light-primary border-0 h-100">
                                <div class="card-body py-3">
                                    <div class="d-flex align-items-center">
                                        <div class="bg-primary bg-opacity-10 p-3 rounded me-3">
                                            <i class="fas fa-user-tie text-primary fs-4"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Selected User</h6>
                                            <h4 class="mb-0">@(selectedUserId.HasValue ? users.FirstOrDefault(u => u.UserId == selectedUserId)?.UserName : "None")</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light-info border-0 h-100">
                                <div class="card-body py-3">
                                    <div class="d-flex align-items-center">
                                        <div class="bg-info bg-opacity-10 p-3 rounded me-3">
                                            <i class="fas fa-calendar-day text-info fs-4"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Last Updated</h6>
                                            <h4 class="mb-0">@DateTime.Now.ToString("hh:mm tt")</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Main Data Table -->
                    <div class="card shadow flex-grow-1">

                        <div class="card-body p-0 position-relative">
                            @if (isLoading)
                            {
                                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-white bg-opacity-75">
                                    <div class="text-center">
                                        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2 fw-semibold">Loading work tasks...</p>
                                    </div>
                                </div>
                            }
                            else if (workTasks.Any())
                            {
                                <div class="card-header bg-white border-bottom-0 py-3">
                                    <h5 class="mb-0">Work Task Details</h5>
                                </div>
                                <div class="table-responsive" style="max-height: 50vh;">
                                    <table class="table table-hover align-middle mb-0">
                                        <thead class="sticky-top bg-light">
                                            <tr>
                                                <th class="bg-light" style="width: 28%;">Service Name</th> <!-- increased width -->
                                                <th class="bg-light" style="width: 12%;">Work Date</th>    <!-- keep compact -->
                                                <th class="bg-light" style="width: 10%;">Status</th>       <!-- keep compact -->
                                                <th class="bg-light" style="width: 25%;">Task</th>         <!-- ~35% of remain -->
                                                <th class="bg-light" style="width: 25%;">Remarks</th>      <!-- ~65% of remain -->
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var task in workTasks)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div class="avatar-sm me-2">
                                                                <div class="avatar-title bg-light rounded">
                                                                    <i class="fas fa-tasks text-primary"></i>
                                                                </div>
                                                            </div>
                                                            <span>@task.ServiceName</span>
                                                        </div>
                                                    </td>
                                                    <td>@task.WorkDate.ToString("dd-MMM-yyyy", new System.Globalization.CultureInfo("en-IN"))</td>
                                                    <td>
                                                        <span class="badge @GetStatusBadgeClass(task.Status ?? "")">
                                                            @task.Status
                                                        </span>
                                                    </td>
                                                    <td>@task.Task</td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(task.Remarks))
                                                        {
                                                            @if (task.Remarks.StartsWith("http"))
                                                            {
                                                                <a href="@task.Remarks" target="_blank" class="text-primary">
                                                                    <i class="fas fa-link me-1"></i>View Link
                                                                </a>
                                                            }

                                                            else
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <div class="d-inline-block w-100 text-truncate" title="@task.Remarks">
                                                                        @task.Remarks
                                                                    </div>
                                                                    <button class="btn btn-sm text-primary bg-transparent border-0 p-0 ms-2"
                                                                    title="Copy to clipboard"
                                                                    @onclick="() => CopyToClipboard(task.Remarks)">
                                                                        <i class="fas fa-copy fa-lg"></i>
                                                                    </button>
                                                                </div>
                                                            }

                                                        }
                                                    </td>

                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                </div>
                            }
                            else if (selectedUserId.HasValue)
                            {
                                <div class="d-flex flex-column align-items-center justify-content-center py-5">
                                    <img src="https://cdn-icons-png.flaticon.com/512/4076/4076478.png" style="width: 120px; opacity: 0.6;" alt="No data" />
                                    <h5 class="mt-3 text-muted">No tasks found</h5>
                                    <p class="text-muted mb-0">This team member has no recorded work tasks</p>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex flex-column align-items-center justify-content-center py-5">
                                    <img src="https://cdn-icons-png.flaticon.com/512/4076/4076472.png" style="width: 120px; opacity: 0.6;" alt="Select user" />
                                    <h5 class="mt-3 text-muted">Select a team member</h5>
                                    <p class="text-muted mb-0">Choose a user from the dropdown to view their work tasks</p>
                                </div>
                            }
                        </div>
                        @if (workTasks.Any())
                        {
                            <div class="card-footer bg-white border-top-0 py-3">
                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <p class="mb-0 text-muted">
                                            Showing
                                            <span class="fw-semibold">@((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, totalRecords)</span>
                                            of
                                            <span class="fw-semibold">@totalRecords</span> tasks
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <nav class="d-flex justify-content-end">
                                            <ul class="pagination pagination-sm mb-0">
                                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                                    <a class="page-link" role="button" style="cursor: pointer;" @onclick="() => PageChanged(currentPage - 1)">Previous</a>
                                                </li>
                                                @for (int i = 1; i <= totalPages; i++)
                                                {
                                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                                        <a class="page-link" role="button" style="cursor: pointer;" @onclick="@(() => PageChanged(i))">@i</a>

                                                    </li>
                                                }
                                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                                    <a class="page-link" role="button" style="cursor: pointer;" @onclick="() => PageChanged(currentPage + 1)">Next</a>
                                                </li>
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public bool ShowTeamWork { get; set; }

    [Parameter]
    public EventCallback<bool> IsDialogClose { get; set; }

    [Parameter]
    public int ProjectId { get; set; } = 0;

    // Add these pagination parameters to your component
    private int currentPage = 1;
    private int pageSize = 10; // Adjust based on your needs
    private int totalRecords = 0;
    private int totalPages = 1;

    private List<UserDTO> users = new();
    private List<ProjectsDTO> projects = new();
    private List<WorkTaskDetailsDto> workTasks = new();
    private int? selectedUserId;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowTeamWork)
        {
            await GetUsers();
        }
    }

    private async Task CloseFormDialog()
    {
        selectedUserId = null;
        workTasks.Clear();
        await IsDialogClose.InvokeAsync(false);
    }


    private async Task PageChanged(int page)
    {
        if (page < 1 || page > totalPages || page == currentPage)
            return; // prevent invalid or duplicate clicks

        currentPage = page;
        await GetData(); // fetch data for the new page
        StateHasChanged(); // ensure UI updates
    }

    private async Task GetUsers()
    {
        try
        {
            users = await userService.GetAllUsersDTOAsync();
           
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
        }
    }

    private async Task CopyToClipboard(string? text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
    private async Task GetData()
    {
        if (!selectedUserId.HasValue) return;

        isLoading = true;
        errorMessage = string.Empty;
        workTasks.Clear();
        StateHasChanged();

        try
        {
            // Get all data first (or modify your service to accept pagination parameters)
            var allTasks = await ProjectsService.GetTeamWorksAsync(selectedUserId.Value, ProjectId) ?? new List<ProjectsDTO>();

            // Flatten all work tasks and apply pagination
            var allWorkTasks = allTasks
                .SelectMany(p => p.Services?
                    .SelectMany(s => s.WorkTaskDetails?
                        .Select(w => new WorkTaskDetailsDto
                                {
                                ServiceName = p.ProjectName + "(" + s.ServiceName + "-PID:" + p.ProjectId + "-SId: " + s.ServiceId + "-PID: "+ProjectId+")",
                                WorkDate = w.WorkDate,
                                Status = w.Status,
                                Task = w.Task,
                                Remarks = w.Remarks
                            }) ?? new List<WorkTaskDetailsDto>())
                    ?? new List<WorkTaskDetailsDto>())
                .OrderByDescending(t => t.WorkDate)
                .ToList();

            totalRecords = allWorkTasks.Count;
            totalPages = (int)Math.Ceiling(totalRecords / (double)pageSize);

            // Apply pagination
            workTasks = allWorkTasks
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();

        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading work tasks: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private Task ResetFilters()
    {
        selectedUserId = null;
        workTasks.Clear();
        errorMessage = string.Empty;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Pending" => "bg-warning text-dark",
            "Completed" => "bg-primary",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}