@using OfficeProject.Models.DTO
@inject ApiService api
@inject IOthersTaskservices othersTaskservices
@inject IDataSerializer? DataSerializer

<div class="modal-body">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!OthersTaskDetailsDto.Any())
    {
        <p>No SEO tasks found</p>
    }
    else
    {


        <div class="table-responsive">
            <table class="table table-bordered table-sm">
                <thead class="table-info">
                    <tr>
                        <th>Lable Name</th>
                        <th>Shared Post</th>
                        <th>Note</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in OthersTaskDetailsDto)
                    {
                        <tr>
                            @if (task == editingTask)
                            {
                                <td><InputText @bind-Value="editingTask.LableName" class="form-control form-control-sm" /></td>
                                <td><InputNumber @bind-Value="editingTask.SharedPost" class="form-control form-control-sm" /></td>
                                <td><InputText @bind-Value="editingTask.Note" class="form-control form-control-sm" /></td>
                                <td>
                                    <button class="btn btn-sm btn-success" @onclick="SaveChanges">
                                        <i class="fas fa-save"></i>
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>


                            }
                            else
                            {
                                <td>@task.LableName</td>
                                <td>@task.SharedPost</td>
                                <td>@task.Note</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EditSeoTask(task)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {

    [Parameter]
    public EventCallback<bool> isFormSubmit { get; set; }

    [Parameter]
    public int workTaskId { get; set; }

    [Parameter] public List<OthersTaskDetailsDto> OthersTaskDetailsDto { get; set; }

    private bool isLoading = true;

    private OthersTaskDetailsDto editingTask = null;

    private OthersTaskDetailsDto originalTask = null;

    @inject IDataSerializer? DataSerializer;

    private EditContext editContext;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync(); // ✅ Good practice to call the base implementation.

        if (OthersTaskDetailsDto != null && OthersTaskDetailsDto.Count > 0)
        {
            isLoading = false;

        }
        editContext = new EditContext(OthersTaskDetailsDto);
        await InvokeAsync(StateHasChanged);

        // DataSerializer?.Serializer(OthersTaskDetailsDto, "LoadWorkTask");
    }


    private async Task LoadSeoTasks()
    {

        try
        {
            isLoading = true;
            var WorkTaskDetailsDto = await api.GetWorkTaskDetailsById(workTaskId);
            OthersTaskDetailsDto = WorkTaskDetailsDto?.OthersTaskDetailsDto ?? new List<OthersTaskDetailsDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading SEO tasks: {ex.Message}");
            OthersTaskDetailsDto = new List<OthersTaskDetailsDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void EditSeoTask(OthersTaskDetailsDto task)
    {
        // Store the original task for cancellation
        originalTask = new OthersTaskDetailsDto
            {
                LableName = task.LableName,
                SharedPost = task.SharedPost,
                Note = task.Note
            // Copy other properties as needed
            };

        editingTask = task;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        try
        {
            if (editingTask == null) return;

            // Ensure WorkRecordId is set
            editingTask.WorkTaskId = workTaskId;

            var success = await othersTaskservices.SaveOrUpdateOthersTaskAsync(editingTask);

            if (success)
            {
                editingTask = null;
                originalTask = null;
                await LoadSeoTasks();
            }
            else
            {
                // Handle update failure
                Console.WriteLine("Failed to save SEO task");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
            // Show error to user
        }
    }

    private void CancelEdit()
    {
        if (editingTask != null && originalTask != null)
        {
            // Restore original values
            editingTask.LableName = originalTask.LableName;
            editingTask.SharedPost = originalTask.SharedPost;
            editingTask.Note = originalTask.Note;

            editingTask = null;
            originalTask = null;
            StateHasChanged();
        }
    }

    private async Task CloseDialog()
    {
        if (isFormSubmit.HasDelegate)
        {
            await isFormSubmit.InvokeAsync(false);
        }
    }
}
