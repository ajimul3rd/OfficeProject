@using OfficeProject.Models.DTO
@using OfficeProject.Models.Enums
@using OfficeProject.Web.Pages.DialogModel
@using OfficeProject.Web.Pages.TappanDialog

@inject ApiService api
@inject IDataSerializer? Json
@inject IUserService userService
@inject IProjectsService ProjectsService
@inject IJSRuntime JSRuntime
@inject IWorkTaskDetailsService WorkTaskDetailsService

@if (ShowModal)
{

    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content" style="height: 85vh;">
                <div class="modal-header">
                    <h5 class="modal-title">Backlink List works</h5>
                    <button class="btn btn-sm btn-danger" @onclick="CloseModal">X</button>
                </div>
                <div class="modal-body" style="overflow-y: auto; max-height: calc(85vh - 100px); padding: 1rem;">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-info">
                                <tr>
                                    <th class="text-center">Sites URL</th>
                                    <th class="text-center">Select</th>
                                </tr>
                            </thead>

                            <tbody>

                                @foreach (var link in Backlinks)
                                {
                                    <tr>


                                        <td>@link.SiteUrl</td>
                                        <td class="text-center">
                                      @*       <input type="checkbox"
                                            class="form-check-input"
                                            style="transform: scale(1.5);"
                                            checked="@link.IsActive"
                                            @onchange="e => OnCheckboxChanged(e, link)" /> *@

                                            <input type="checkbox"
                                                   @onchange="(e) => ToggleProductSelection(link, (bool?)e.Value)"
                                                   checked="@IsProductSelectedOrAssigned(link)"
                                                   disabled="@IsProductPreAssigned(link)"
                                                   class="custom-checkbox @(IsProductSelectedOrAssigned(link) ? "selected" : "")" />




                                        </td>
                                    </tr>
                                }


                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>




}
@code {

    [Inject] private NavigationManager Navigation { get; set; } = null!;

    [Parameter] public bool ShowModal { get; set; } = false;

    [Parameter] public EventCallback<bool> ModelAction { get; set; }

    [Parameter] public EventCallback<List<BacklinkActivity.BacklinkDTO>> ModelData { get; set; } = new();

    [Parameter] public List<BacklinkActivity.BacklinkDTO> CallerSelectedData { get; set; } = new();

    private List<BacklinkActivity.BacklinkDTO> UserSelectedData = new();

    private List<BacklinkActivity.BacklinkDTO> Backlinks = new();

    protected override async Task OnInitializedAsync()
    {


        Backlinks = new List<BacklinkActivity.BacklinkDTO>()
        {
            new BacklinkActivity.BacklinkDTO()
            {
                SiteUrl = "http://apeopledirectory.com/",
                PublishedUrl = ""
            },
            new BacklinkActivity.BacklinkDTO()
            {
                SiteUrl = "http://exampledirectory.org/",
                PublishedUrl = ""
            }
            ,new BacklinkActivity.BacklinkDTO()
            {
                SiteUrl = "http://exampledirectory.org0/",
                PublishedUrl = ""
            }
        };


        await Task.CompletedTask;
    }
    protected override void OnParametersSet()
    {
      
        if (CallerSelectedData != null && Backlinks != null)
        {
            // Reset selectedProducts if callerSelectedProducts is empty
            if (!CallerSelectedData.Any())
            {
                UserSelectedData.Clear();
            }

            var newSelections = Backlinks
                .Where(p => CallerSelectedData.Any(csp => csp.SiteUrl == p.SiteUrl) &&
                            !UserSelectedData.Any(sp => sp.SiteUrl == p.SiteUrl))
                .ToList();

            UserSelectedData.AddRange(newSelections);
            StateHasChanged();
        }

    }


    private async Task CloseModal()
    {
        ShowModal = false;

        await ModelAction.InvokeAsync(false);
                     
    }



    private async Task ToggleProductSelection(BacklinkActivity.BacklinkDTO data, bool? isChecked)
    {
        if (isChecked == true)
        {
            if (!UserSelectedData.Any(p => p.SiteUrl == data.SiteUrl))
            {
                UserSelectedData.Add(data);
                // DataSerializer.Serializer(product, "DialogProductsList:ToggleProductSelection");
            }
        }
        else
        {
            UserSelectedData.RemoveAll(p => p.SiteUrl == data.SiteUrl);
        }

        if (ModelData.HasDelegate)
        {
            await ModelData.InvokeAsync(UserSelectedData);
        }
        StateHasChanged();
    }

    private bool IsProductSelectedOrAssigned(BacklinkActivity.BacklinkDTO data)
    {

        if (CallerSelectedData != null)
        {
            return UserSelectedData.Any(p => p.SiteUrl == data.SiteUrl) ||
                   (CallerSelectedData?.Any(CallerSelectedData => CallerSelectedData.SiteUrl == data.SiteUrl) ?? false);

        }
        return false;
    }

    private bool IsProductPreAssigned(BacklinkActivity.BacklinkDTO data)
    {
        return CallerSelectedData?.Any(CallerSelectedData => CallerSelectedData.SiteUrl == data.SiteUrl) ?? false;
    }

    }














    // private async Task OnCheckboxChanged(ChangeEventArgs e, BacklinkActivity.BacklinkDTO data)
    // {
    //     data.IsActive = (bool)e.Value!;

    //     if (data.IsActive)
    //     {
    //         if (!selectedLinks.Contains(data))
    //             selectedLinks.Add(data);
    //     }
    //     else
    //     {
    //         selectedLinks.Remove(data);
    //     }

    //     if (ModelData.HasDelegate)
    //     {
    //         await ModelData.InvokeAsync(selectedLinks);
    //     }

    //     Json!.Serializer(selectedLinks, "selectedLinks");
    // }



     
// }