@using OfficeProject.Models.DTO
@using System.Text.Json
@inject IDataSerializer? DataSerializer


@if (ShowModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content" style="height: 85vh;">
                <div class="modal-header">
                    <h5 class="modal-title">User Working Activity</h5>
                    <button class="btn btn-sm btn-danger" @onclick="CloseModal">X</button>
                </div>

                <div class="modal-body" style="overflow-y: auto; max-height: calc(85vh - 100px); padding: 1rem;">
                    <div class="d-flex justify-content-end mb-2">
                        @* <button class="btn btn-sm btn-success" @onclick="() => showAddForm = true">+ Add User Working Activity</button> *@
                        <button class="btn btn-sm btn-success" @onclick="ToggleAddCancelForm">
                            @(showAddForm ? "Cancel" : "+ Add User Working Activity")
                        </button>
                    </div>
                    @if (showAddForm)
                    {
                        <div class="card shadow-sm mb-4">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-12">

                                        <div class="input-group mb-3 w-100">
                                            <input type="text" class="form-control"
                                            placeholder="Enter new User Working Activity Name"
                                            @bind="newWorkingActivityName" @onkeydown="HandleKeyDown" />

                                            <button class="btn btn-success" type="button"
                                            @onclick="AddNewUserWorkingActivity"
                                            disabled="@string.IsNullOrWhiteSpace(newWorkingActivityName)">
                                                <i class="fas fa-save me-1"></i> Save
                                            </button>

                                            <button class="btn btn-outline-secondary" type="button"
                                            @onclick="CancelAdd">
                                                <i class="fas fa-times me-1"></i> Cancel
                                            </button>
                                        </div>



                                        @if (!string.IsNullOrEmpty(successMessage))
                                        {
                                            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                                                <i class="fas fa-check-circle me-2"></i> @successMessage
                                                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                                            </div>
                                        }

                                        @if (!string.IsNullOrEmpty(errorMessage))
                                        {
                                            <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                                                <i class="fas fa-exclamation-circle me-2"></i> @errorMessage
                                                <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(_statusMessage))
                        {
                            <div class="alert @(_isError ? "alert-danger" : "alert-success") mt-4">
                                <i class="@(_isError ? "fas fa-exclamation-circle" : "fas fa-check-circle") me-2"></i>
                                @_statusMessage
                            </div>
                        }

                    }
                    <!-- Search and Filter Controls -->
                    <div class="mb-3 d-flex justify-content-between">
                        <input type="text" class="form-control me-2"
                        placeholder="Search..."
                        @bind="_searchText" @bind:event="oninput" style="width: 200px;" />
                    </div>

                    <!-- Product Table -->
                    @if (FilteredActivities != null && FilteredActivities.Any())
                    {
                        <table class="table table-bordered table-sm table-hover">
                            <thead class="table-info sticky-header">
                                <tr>
                                    <th>Activity Name</th>
                                    <th>Select</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var activity in FilteredActivities)
                                {
                                    <tr>
                                        <td>@activity.MasterActivityName</td>
                                        <td>
                                            <input type="checkbox"
                                            @onchange="(e) => ToggleActivitySelection(activity, (bool?)e.Value)"
                                            checked="@IsActivitySelectedOrAssigned(activity)"
                                            disabled="@IsActivityPreAssigned(activity)"
                                                   class="custom-checkbox @(IsActivitySelectedOrAssigned(activity) ? "selected" : "")" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-info">No activities found</div>
                    }
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@_errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>          

}
<style>

    <!-- Custom Checkbox on table select row-- >
    .custom-checkbox {
        width: 20px;
        height: 20px;
        accent-color: transparent;
        cursor: pointer;
    }

    .custom-checkbox.selected {
        accent-color: green;
    }

</style>

@* <style> *@
@*     .modal-overlay { *@
@*     position: fixed; *@
@*     top: 0; *@
@*     left: 0; *@
@*     width: 100vw; *@
@*     height: 100vh; *@
@*     background-color: rgba(0, 0, 0, 0.5); *@
@*     display: flex; *@
@*     align-items: center; *@
@*     justify-content: center; *@
@*     z-index: 1050; *@
@*     } *@

@*     .modal-content { *@
@*     background-color: white; *@
@*     border-radius: 8px; *@
@*     max-height: 90vh; *@
@*     overflow-y: auto; *@
@*     padding: 20px; *@
@*     box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); *@
@*     } *@
@* </style> *@

@code {
    private List<UserActivityMasterDto> _tableData = new();

    private UserActivityMasterDto _activity = new();

    private string _searchText = "";

    private string _errorMessage = string.Empty;

    private bool showAddForm = false;

    private EditContext _editContext;

    private string _statusMessage = string.Empty;

    private bool _isError = false;

    private List<UserActivityMasterDto> _selectedMaster = new();

    private string newWorkingActivityName;

    private string errorMessage;

    private string successMessage;

    [Parameter]
    public bool ShowModal { get; set; }

    [Parameter]
    public EventCallback<bool> ShowModalChanged { get; set; }

    [Parameter]
    public EventCallback<List<UserActivityMasterDto>> OnSelectedMaster { get; set; }

    [Parameter]
    public List<UserWorkingActivityDto> CallerSelectedData { get; set; }

    [Inject]
    public IUserActivityMasterService UserActivityMasterService { get; set; }

    @inject IDataSerializer? DataSerializer;

    protected override async Task OnInitializedAsync()
    {
        _activity = new UserActivityMasterDto { MasterId = 0 };
        _editContext = new EditContext(_activity);
        await LoadUserWorkingActivities();
    }

    protected override async Task OnParametersSetAsync()
    {
        showAddForm = false;
        if (ShowModal)
        {
            await LoadUserWorkingActivities();
        }
    }

    private void ToggleActivitySelection(UserActivityMasterDto activity, bool? isChecked)
    {
        if (isChecked == true)
        {
            if (!_selectedMaster.Any(p => p.MasterActivityName == activity.MasterActivityName))
            {
                _selectedMaster.Add(activity);
            }
        }
        else
        {
            _selectedMaster.RemoveAll(p => p.MasterActivityName == activity.MasterActivityName);
        }
    }

    private bool IsActivitySelectedOrAssigned(UserActivityMasterDto activity)
    {
        return CallerSelectedData?.Any(p => p.WorkingActivityName == activity.MasterActivityName) ?? false;
    }

    private bool IsActivityPreAssigned(UserActivityMasterDto activity)
    {
        return CallerSelectedData?.Any(p => p.WorkingActivityName == activity.MasterActivityName) ?? false;
    }



    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newWorkingActivityName))
        {
            await AddNewUserWorkingActivity();
        }
        else if (e.Key == "Escape")
        {
            CancelAdd();
        }
    }

    private void CancelAdd()
    {

        newWorkingActivityName = null;
        errorMessage = null;
        successMessage = null;
        showAddForm = false;
    }

    private async Task AddNewUserWorkingActivity()
    {
        if (string.IsNullOrWhiteSpace(newWorkingActivityName))
        {
            errorMessage = "Please enter a activity name for the user working activity.";
            return;
        }

        try
        {


            var data = new UserActivityMasterDto { MasterActivityName = newWorkingActivityName };
            await UserActivityMasterService.AddOrUpdateGetUserActivityList(data);
            successMessage = $"User working activity '{newWorkingActivityName}' added successfully!";
            await LoadUserWorkingActivities();
            newWorkingActivityName = null;
            showAddForm = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving working activity: {ex.Message}";
        }
    }

    private async Task LoadUserWorkingActivities()
    {
        try
        {
            _tableData = await UserActivityMasterService.GetAllUserActivityList() ?? new List<UserActivityMasterDto>();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading activities: {ex.Message}";
        }
    }

    private IEnumerable<UserActivityMasterDto> FilteredActivities =>
        _tableData.Where(c =>
            (string.IsNullOrWhiteSpace(_searchText) ||
             c.MasterActivityName.Contains(_searchText, StringComparison.OrdinalIgnoreCase)));

    private void ToggleAddCancelForm()
    {
        showAddForm = !showAddForm;
        ResetForm();
    }



    private void ResetForm()
    {
        _activity = new UserActivityMasterDto();
        _editContext = new EditContext(_activity);
        StateHasChanged();
    }

    private void ValidateField(object model, string fieldName)
    {
        var fieldIdentifier = new FieldIdentifier(model, fieldName);
        _editContext?.NotifyFieldChanged(fieldIdentifier);
    }

    private async Task CloseModal()
    {
        ShowModal = false;
        if (OnSelectedMaster.HasDelegate)
        {
            await OnSelectedMaster.InvokeAsync(_selectedMaster);
        }


   
        DataSerializer?.Serializer(_selectedMaster, "CloseModal:");
        StateHasChanged();
        ResetSelectedActivities();

        if (ShowModalChanged.HasDelegate)
        {
            await ShowModalChanged.InvokeAsync(false);
        }
        StateHasChanged();
    }

    private void ResetSelectedActivities()
    {
        _selectedMaster.Clear();

        if (CallerSelectedData != null && _tableData != null)
        {
            _selectedMaster = _tableData
                .Where(p => CallerSelectedData.Any(a => a.WorkingActivityId == p.MasterId))
                .ToList();
        }
    }
}

