@page "/to-day-work"
@inject ApiService api
@using OfficeProject.Models.DTO
@using System.ComponentModel.DataAnnotations
@using OfficeProject.Web.Pages.DialogModel
@using System.Text.Json
@using OfficeProject.Models.Enums

<style>
    .low-progress {
    background-color: #f8d7da; /* light red */
    color: #721c24;
    }

    .medium-progress {
    background-color: #fff3cd; /* light yellow */
    color: #856404;
    }

    .high-progress {
    background-color: #d4edda; /* light green */
    color: #155724;
    }


    .low-progress-bg {
    background-color: #9F1E1E !important; /* Light red */
    color: #FFFFFF !important;
    }

    .medium-progress-bg {
    background-color: #F6BE13 !important; /* Light yellow */
    color: #000000 !important;
    }

    .high-progress-bg {
    background-color: #d4edda !important; /* light green */
    color: #155724 !important;
    }


    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff; /* or your header background */
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .modal {
    z-index: 1050;
    }

    /* Activity dialog should appear above main form */
    .activity-dialog-modal {
    z-index: 1060 !important;
    }

    /* Backdrop for activity dialog */
    .activity-dialog-backdrop {
    z-index: 1055 !important;
    background-color: rgba(0,0,0,0.5);
    }

    body.modal-open {
    overflow: hidden;
    }

    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff;
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .large-checkbox {
    transform: scale(1.4);
    transform-origin: left center;
    margin-right: 0.5rem;
    }

    .checkbox-label {
    display: flex;
    align-items: center;
    font-weight: 500;
    font-size: 1rem;
    margin-bottom: 0.5rem;
    cursor: pointer;
    }

    /*    .fixed-top {
    z-index: 2000;
    }

    .scale-wrapper {
    transform: scale(0.85);
    transform-origin: top left;
    } */
</style>


<AuthorizeView Context="outerAuthContext">
    <Authorized>


        <!-- Table Section -->

        <h3 class="mb-4 fw-bold text-primary">Today Works</h3>
        <div class="d-flex flex-wrap align-items-center gap-2">
            <div class="flex-grow-1" style="max-width: 400px;">
                <input class="form-control form-control-lg"
                type="text"
                @bind="searchText"
                @bind:event="oninput"
                placeholder="🔍 Search by PID, Project Name or Client Name..." />
            </div>

        </div>

        <br />

        <div class="card-body">

            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            @if (projects == null || !projects.Any())
            {
                <div class="alert alert-info">No Services found</div>
            }
            else
            {
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-info sticky-header">
                            <tr>
                                @* <th>Service Date</th> *@
                                <th class="align-top">PID-SID</th>
                                <th class ="align-top">Project Name</th>
                                <th class="align-top">Post</th>
                                <th class="align-top">Reels</th>
                                <th class="align-top">Backlink</th>
                                <th class="align-top">Classified</th>
                                <th class="align-top">Social Sharing</th>
                                <th class="align-top">Used Ads Budget</th>
                                <th class="align-top">Billing Type</th>
                                <th class="align-top">Team Work</th>
                                <th class="align-top">Action</th>
                            </tr>

                        </thead>
                        <tbody>
                            @foreach (var project in filteredProjects)
                            {
                                if (project.Services != null && project.Services.Any())
                                {
                                    foreach (var service in project.Services)
                                    {
                                        <tr>
                                            @* <td>@service.StartDate</td> *@
                                            <td>@project.ProjectId - (@service.ServiceId)</td>
                                            <td>@project.ProjectName - (@service.ServiceName)</td>
                                            <td class="@GetWorkProgressColor(service, WorkMetricType.SharedPost, (int)service.TotalPost!, service.StartDate, (int)service.CompletePost!)">
                                                @service.CompletePost of (@service.TotalPost)
                                            </td>

                                            <td class="@GetWorkProgressColor(service, WorkMetricType.CreatedReels, (int)service.TotalReels!, service.StartDate, (int)service.CompleteReels!)">
                                                @service.CompleteReels of (@service.TotalReels)
                                            </td>

                                            <td class="@GetProgressClass((int)service.CompleteBacklink!,service.Backlink)">@service.CompleteBacklink of (@service.Backlink)</td>
                                            <td class="@GetProgressClass((int)service.CompleteClasified!,service.Clasified)"> @service.CompleteClasified of (@service.Clasified)</td>
                                            <td class="@GetProgressClass((int)service.CompleteSocialSharing!,service.SocialSharing)">@service.CompleteSocialSharing of (@service.SocialSharing)</td>
                                            <td class="@GetProgressClass(service.CompleteUsedAdsBudget ?? 0, service.AdsBudget)">@((service.CompleteUsedAdsBudget ?? 0).ToString("c", new System.Globalization.CultureInfo("en-IN")))of (@service.AdsBudget.ToString("c", new System.Globalization.CultureInfo("en-IN"))) </td>
                                            <td>@service.BillingType</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => ViewTeamWork((int)project.ProjectId!)" @onclick:stopPropagation
                                                title="View Team Work">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => AddWorkRecord(service)">
                                                    <i class="fas fa-plus"></i> Add Work
                                                </button>
                                            </td>
                                        </tr>

                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="13" class="text-center text-muted">
                                            No services found for project: @data.ProjectName
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>
                </div>

            }
        </div>

        @if (IsVisible)
        {
            <DialogAddWorkTask IsVisible="@IsVisible"
            service="@Service"
            isAddWorkFormSubmit="@HandleWorkFormSubmit"
            OnCancel="@OnDialogCancel" />
        }


        @if (ShowTeamWork)
        {
            <DialogViewTeamWorks ShowTeamWork="@ShowTeamWork"
            ProjectId="@ProjectId"
            IsDialogClose="@((bool val) => ShowTeamWork = val)" />

        }

    </Authorized>

    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>



</AuthorizeView>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private ApiService ApiService { get; set; } = null!;
    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private IDataSerializer? DataSerializer { get; set; }
    [Inject] private DateService? DateService { get; set; }
    [Inject] private IService? GetServices { get; set; }


    private List<DateTime> breakpoints = new();

    private BillingType billingType = BillingType.Monthly;

    private ServicesDTO Service = new();

    private List<ServicesDTO> Services = new();

    private ProjectsDTO data { get; set; } = new();

    private List<ProjectsDTO> projects = new();

    private bool loadFailed = false;

    private bool isLoading = true;



    private bool IsVisible { get; set; } = false;

    private bool ShowTeamWork = false;

    private int ProjectId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetProjectPerUserAsync();
        isLoading = false;
    }


    protected async Task GetProjectPerUserAsync()
    {
        try
        {
            data = new ProjectsDTO();
            projects = await api.GetProjectPerUserAsync();

            // Optional: Check if the first project has no services
            if (projects.Count > 0 && (projects[0].Services == null || projects[0].Services!.Count == 0))
            {
                projects.Clear(); // Or assign new List<ProjectsDTO>() again if preferred
            }

            // Optional: serialize if needed
            // DataSerializer.Serializer(projects, "ToDayWorkList:GetProjectPerUserAsync");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }


    private string GetWorkProgressColor(
    ServicesDTO service,
    WorkMetricType metricType,
    int totalUnits,
    DateTime startDate,
    int completedUnits)
    {
        if (totalUnits == 0 || service.WorkTaskDetails == null)
            return "";

        var breakpoints = DateService!.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);
        var interval = DateService.GetCurrentInterval(breakpoints);
        var currentInterval = DateService.GetCurrentIntervalNumber(breakpoints);

        if (interval == null || currentInterval == null)
            return "";

        int totalWorkingDays = DateService.GetTotalDaysExcludingSundays(startDate, 30);
        int daysWorkedSoFar = DateService.GetWorkingDaysBetween(startDate, DateTime.Today);
        if (daysWorkedSoFar == 0 || totalWorkingDays == 0) return "";

        DateTime intervalStart = interval.Value.Start.Date;
        DateTime intervalEnd = interval.Value.End.Date;


        // Console.WriteLine("interval:" + interval);
        // For first interval
        if (IsFirstSlaveInterval(breakpoints))
        {
            int intervalLength = (intervalEnd - intervalStart).Days + 1;
            int todayPosition = (DateTime.Today - intervalStart).Days + 1;
            if (todayPosition == 1)
            {
                // Console.WriteLine("Case-1: if");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                return "";
            }
            else
            if (todayPosition == intervalLength)
            {
                // Console.WriteLine("Case-1: else if");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                // Console.WriteLine("currentInterval (type): " + currentInterval.GetType());
                // Console.WriteLine("completedUnits (type): " + completedUnits.GetType());
                // Console.WriteLine("currentInterval == completedUnits? " + (currentInterval == completedUnits));

                if (currentInterval <= completedUnits)
                {
                    return "";
                }
                return "low-progress-bg";
            }
            else
            {
                // Console.WriteLine("Case-1: else");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                if (currentInterval <= completedUnits)
                {
                    return "";
                }
                return "medium-progress-bg";
            }

        }
        else if (currentInterval - 1 > completedUnits)
        {
            // Console.WriteLine("Case-2: else");
            // Console.WriteLine("currentInterval:" + currentInterval);
            // Console.WriteLine("completedUnits:" + completedUnits);
            return "low-progress-bg";
        }
        else
        {


            int intervalLength = (intervalEnd - intervalStart).Days;
            int todayPosition = (DateTime.Today - intervalStart).Days;
            if (todayPosition == 1)
            {
                // Console.WriteLine("Case-3: if");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                return "";
            }
            else if (todayPosition == intervalLength)
            {
                // Console.WriteLine("Case-3: else if");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                if (currentInterval <= completedUnits)
                {
                    return "";
                }
                return "low-progress-bg";
            }
            else
            {
                // Console.WriteLine("Case-3: else");
                // Console.WriteLine("todayPosition:" + todayPosition);
                // Console.WriteLine("intervalLength:" + intervalLength);
                // Console.WriteLine("currentInterval:" + currentInterval);
                // Console.WriteLine("completedUnits:" + completedUnits);
                if (currentInterval <= completedUnits)
                {
                    return "";
                }
                return "medium-progress-bg";
            }

        }
       
    }



    public bool IsFirstSlaveInterval(List<DateTime> breakpoints)
    {
        DateTime currentDate = DateTime.Today;

        if (breakpoints.Count >= 2)
        {
            DateTime start = breakpoints[0].Date;
            DateTime end = breakpoints[1].Date;
            if (currentDate >= start && currentDate <= end)
            {
                return true;
            }
        }

        return false;
    }






    private bool MetricMatch(WorkTaskDetailsDto w, WorkMetricType metricType)
    {
        return metricType switch
        {
            WorkMetricType.SharedPost => w.SharedPost > 0,
            WorkMetricType.CreatedReels => w.CreatedReels > 0,
            WorkMetricType.Backlink => w.Backlink > 0,
            WorkMetricType.Clasified => w.Clasified > 0,
            WorkMetricType.SocialSharing => w.SocialSharing > 0,
            _ => false
        };
    }


    private void AddWorkRecord(ServicesDTO service)
    {       
        Service = service;
        IsVisible = true;
    }


    private async Task HandleWorkFormSubmit(bool isSuccess)
    {

        IsVisible = false;
        await GetProjectPerUserAsync();

    }
    private void OnDialogCancel()
    {
        IsVisible = false;
    }

    private void ViewTeamWork(int ProjectId)
    {
        ShowTeamWork = true;
        this.ProjectId = ProjectId;
    }

    private string GetProgressClass(decimal current, decimal total)
    {
        if (total == 0)
            return string.Empty;

        var percentage = (current / total) * 100;

        if (percentage < 50)
            return "low-progress";
        else if (percentage < 80)
            return "medium-progress";
        else
            return "high-progress";
    }


    private string searchText = "";

    private IEnumerable<ProjectsDTO> filteredProjects => string.IsNullOrWhiteSpace(searchText)
        ? projects
        : projects.Where(p =>
            (p.ProjectId.ToString()!.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.ProjectName) && p.ProjectName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.Client?.ClientName) && p.Client.ClientName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        );

// furthers use for shorting
    // public class ProjectServicePair
    // {
    //     public ProjectsDTO Project { get; set; }
    //     public ServicesDTO Service { get; set; }
    // }
    //  private List<ProjectServicePair> SortedProjectServices => projects?
    // .SelectMany(project => project.Services?.Select(service => new ProjectServicePair
    //     {
    //         Project = project,
    //         Service = service
    //     }) ?? new List<ProjectServicePair>())
    // .OrderByDescending(pair => GetPriority(GetWorkProgressColor(
    //     pair.Service,
    //     WorkMetricType.SharedPost,
    //     (int)pair.Service.TotalPost!,
    //     pair.Service.StartDate,
    //     (int)pair.Service.CompletePost!
    // )))
    // .ToList();

    // private int GetPriority(string cssClass)
    // {
    //     return cssClass switch
    //     {
    //         "low-progress-bg" => 3,     //highest priority (red)
    //         "medium-progress-bg" => 2,  //medium (yellow)
    //         _ => 1                      //lowest priority (green/empty)
    //     };
    // }
}
