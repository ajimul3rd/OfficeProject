@page "/to-day-work"
@inject ApiService api
@using OfficeProject.Models.DTO
@using System.ComponentModel.DataAnnotations
@using OfficeProject.Web.Pages.DialogModel
@using System.Text.Json
@using OfficeProject.Models.Enums


<style>
    .low-progress {
    background-color: #f8d7da; /* light red */
    color: #721c24;
    }

    .medium-progress {
    background-color: #fff3cd; /* light yellow */
    color: #856404;
    }

    .high-progress {
    background-color: #d4edda; /* light green */
    color: #155724;
    }


    .low-progress-bg {
    background-color: #FF0000 !important; /* Light red */
    color: #FFFFFF !important;
    }

    .medium-progress-bg {
    background-color: #F6BE13 !important; /* Light yellow */
    color: #000000 !important;
    }

    .advanced-progress-bg {
    background-color: #008000 !important; /* Light yellow */
    color: white !important;
    }

    .high-progress-bg {
    background-color: #d4edda !important; /* light green */
    color: #155724 !important;
    }


    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff; /* or your header background */
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .modal {
    z-index: 1050;
    }

    /* Activity dialog should appear above main form */
    .activity-dialog-modal {
    z-index: 1060 !important;
    }

    /* Backdrop for activity dialog */
    .activity-dialog-backdrop {
    z-index: 1055 !important;
    background-color: rgba(0,0,0,0.5);
    }

    body.modal-open {
    overflow: hidden;
    }

    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff;
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .large-checkbox {
    transform: scale(1.4);
    transform-origin: left center;
    margin-right: 0.5rem;
    }

    .checkbox-label {
    display: flex;
    align-items: center;
    font-weight: 500;
    font-size: 1rem;
    margin-bottom: 0.5rem;
    cursor: pointer;
    }

    /*    .fixed-top {
    z-index: 2000;
    }

    .scale-wrapper {
    transform: scale(0.85);
    transform-origin: top left;
    } */
</style>

<AuthorizeView Context="outerAuthContext">
    <Authorized>


        <!-- Table Section -->





        <div class="row align-items-start m-0 p-1 border border-primary shadow rounded">
            <!-- Left Column: 30% width (Overview + Search) -->
            <h3 class="mb-4 fw-bold text-primary">Overview</h3>
            <div class="d-flex flex-wrap align-items-center gap-2">
                <div class="flex-grow-1" style="max-width: 400px;">
                    <input class="form-control form-control-lg"
                    type="text"
                    @bind="searchText"
                    @bind:event="oninput"
                    placeholder="🔍 Search by PID, Project Name or Client Name..." />
                </div>

            </div>
            <div class="row g-2 flex-wrap">
                <div class="col-md-2 col-6">
                    <strong class="text-primary summary-label">📝 Posts:</strong>
                    <span class="ms-1">@CompletedPosts / @TotalPosts</span>
                </div>
                <div class="col-md-2 col-6">
                    <strong class="text-warning summary-label">🎬 Reels:</strong>
                    <span class="ms-1">@CompletedReels / @TotalReels</span>
                </div>
                <div class="col-md-2 col-6">
                    <strong class="text-success summary-label">💰 Ads Budget:</strong>
                    <span class="ms-1">
                        @CompleteUsedAdsBudget.ToString("c", new System.Globalization.CultureInfo("en-IN"))
                        /
                        @TotalAdsBudget.ToString("c", new System.Globalization.CultureInfo("en-IN"))
                    </span>
                </div>
                <div class="col-md-2 col-6">
                    <strong class="text-info summary-label">🔗 Backlinks:</strong>
                    <span class="ms-1">@CompletedBacklink / @TotalBacklink</span>
                </div>
                <div class="col-md-2 col-6">
                    <strong class="text-secondary summary-label">📢 Classifieds:</strong>
                    <span class="ms-1">@CompletedClasified / @TotalClasified</span>
                </div>
                <div class="col-md-2 col-6">
                    <strong class="text-success summary-label">📣 Social Sharing:</strong>
                    <span class="ms-1">@CompletedSocialSharing / @TotalSocialSharing</span>
                </div>
            </div>
        </div>





        <br />

        <div class="card-body">

            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            @if (projects == null || !projects.Any())
            {
                <div class="alert alert-info">No Services found</div>
            }
            else
            {
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-info sticky-header">
                            <tr>
                                @* <th>Service Date</th> *@
                                <th class="align-top">PID-SID</th>
                                <th class="align-top">Project Name</th>
                                <th class="align-top">Post</th>
                                <th class="align-top">Reels</th>
                                <th class="align-top">Backlink</th>
                                <th class="align-top">Classified</th>
                                <th class="align-top">Social Sharing</th>
                                <th class="align-top">Used Ads Budget</th>
                                <th class="align-top">Billing Type</th>
                                <th class="align-top">Team Work</th>
                                <th class="align-top">Action</th>
                            </tr>

                        </thead>
                        <tbody>
                            @foreach (var project in filteredProjects)
                            {
                                if (project.Services != null && project.Services.Any())
                                {
                                    foreach (var service in project.Services)
                                    {
                                        <tr>
                                            @{
                                                var postProgress = GetWorkProgressColor(service, (int)service.TotalPost!, service.StartDate, (int)service.CompletePost!);
                                                service.DayLeftPost = postProgress.DaysLeft;

                                                var postRequired = GetWorkProgressColor(service, (int)service.TotalPost!, service.StartDate, (int)service.CompletePost!);
                                                service.RequiredPost = postRequired.RequiredUnit;

                                                var reelProgress = GetWorkProgressColor(service, (int)service.TotalReels!, service.StartDate, (int)service.CompleteReels!);
                                                service.DayLeftReels = reelProgress.DaysLeft;

                                                var reelRequired = GetWorkProgressColor(service, (int)service.TotalReels!, service.StartDate, (int)service.CompleteReels!);
                                                service.RequiredReels = reelRequired.RequiredUnit;

                                                var backlinkProgress = GetWorkProgressColor(service, (int)service.Backlink!, service.StartDate, (int)service.CompleteBacklink!);
                                                service.DayLeftBacklink = backlinkProgress.DaysLeft;

                                                var backlinkRequired = GetWorkProgressColor(service, (int)service.Backlink!, service.StartDate, (int)service.CompleteBacklink!);
                                                service.RequiredBacklink = backlinkRequired.RequiredUnit;

                                                var clasifiedProgress = GetWorkProgressColor(service, (int)service.Clasified!, service.StartDate, (int)service.CompleteClasified!);
                                                service.DayLeftClasified = clasifiedProgress.DaysLeft;

                                                var clasifiedRequired = GetWorkProgressColor(service, (int)service.Clasified!, service.StartDate, (int)service.CompleteClasified!);
                                                service.RequiredClasified = clasifiedRequired.RequiredUnit;

                                                var socilSharingProgress = GetWorkProgressColor(service, (int)service.SocialSharing!, service.StartDate, (int)service.CompleteSocialSharing!);
                                                service.DayLeftSocialSharing = socilSharingProgress.DaysLeft;

                                                var socilSharingRequired = GetWorkProgressColor(service, (int)service.SocialSharing!, service.StartDate, (int)service.CompleteSocialSharing!);
                                                service.RequiredSocialSharing = socilSharingRequired.RequiredUnit;
                                            }
                                            @* <td>@service.StartDate</td> *@
                                            <td>@project.ProjectId - @service.ServiceId</td>
                                            <td>@project.ProjectName - @service.ServiceName</td>

                                            <td class="@postProgress.ColorClass" style="padding: 8px; line-height: 1.4;">
                                                <div style="font-weight: 500;">@service.CompletePost <span>of (@service.TotalPost)</span></div>

                                                @if (@service.RequiredPost > 0)
                                                {
                                                    <div style="font-size: 0.75em;margin-top: 4px; font-weight: 500;">Post: @service.RequiredPost / @service.DayLeftPost Day left</div>
                                                }
                                            </td>

                                            <td class="@reelProgress.ColorClass" style="padding: 8px; line-height: 1.4;">
                                                <div style="font-weight: 500;">@service.CompleteReels <span>of (@service.TotalReels)</span></div>

                                                @if (@service.RequiredReels > 0)
                                                {
                                                    <div style="font-size: 0.75em;margin-top: 4px; font-weight: 500;">Post: @service.RequiredReels / @service.DayLeftReels Day left</div>
                                                }
                                            </td>
                                            <td class="@backlinkProgress.ColorClass" style="padding: 8px; line-height: 1.4;">
                                                <div style="font-weight: 500;">@service.CompleteBacklink <span>of (@service.Backlink)</span></div>

                                                @if (@service.RequiredBacklink > 0)
                                                {
                                                    <div style="font-size: 0.75em;margin-top: 4px; font-weight: 500;">Post: @service.RequiredBacklink / @service.DayLeftBacklink Day left</div>
                                                }
                                            </td>
                                            <td class="@clasifiedProgress.ColorClass" style="padding: 8px; line-height: 1.4;">
                                                <div style="font-weight: 500;">@service.CompleteClasified <span>of (@service.Clasified)</span></div>

                                                @if (@service.RequiredClasified > 0)
                                                {
                                                    <div style="font-size: 0.75em;margin-top: 4px; font-weight: 500;">Post: @service.RequiredClasified / @service.DayLeftClasified Day left</div>
                                                }
                                            </td>

                                            <td class="@socilSharingProgress.ColorClass" style="padding: 8px; line-height: 1.4;">
                                                <div style="font-weight: 500;">@service.CompleteSocialSharing <span>of (@service.SocialSharing)</span></div>

                                                @if (@service.RequiredSocialSharing > 0)
                                                {
                                                    <div style="font-size: 0.75em;margin-top: 4px; font-weight: 500;">Post: @service.RequiredSocialSharing / @service.DayLeftSocialSharing Day left</div>
                                                }
                                            </td>

                                            <td class="@GetProgressClass(service.CompleteUsedAdsBudget ?? 0, service.AdsBudget)">@((service.CompleteUsedAdsBudget ?? 0).ToString("c", new System.Globalization.CultureInfo("en-IN")))of (@service.AdsBudget.ToString("c", new System.Globalization.CultureInfo("en-IN"))) </td>
                                            <td>@service.BillingType</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => ViewTeamWork((int)project.ProjectId!)" @onclick:stopPropagation
                                                title="View Team Work">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => AddWorkRecord(service)">
                                                    <i class="fas fa-plus"></i> Add Work
                                                </button>
                                            </td>
                                        </tr>

                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="13" class="text-center text-muted">
                                            No services found for project: @data.ProjectName
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>
                </div>

            }
        </div>

        @if (IsVisible)
        {
            <DialogAddWorkTask IsVisible="@IsVisible"
            service="@Service"
            isAddWorkFormSubmit="@HandleWorkFormSubmit"
            OnCancel="@OnDialogCancel" />
        }


        @if (ShowTeamWork)
        {
            <DialogViewTeamWorks ShowTeamWork="@ShowTeamWork"
            ProjectId="@ProjectId"
            IsDialogClose="@((bool val) => ShowTeamWork = val)" />

        }

    </Authorized>

    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>



</AuthorizeView>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private ApiService ApiService { get; set; } = null!;
    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private IDataSerializer? JSON { get; set; }
    [Inject] private DateService? DateService { get; set; }
    [Inject] private IService? GetServices { get; set; }
    [Inject] private IGlobalDataService? GlobalDataService { get; set; }

    private List<DateTime> breakpoints = new();

    private BillingType billingType = BillingType.Monthly;

    private ServicesDTO Service = new();

    private List<ServicesDTO> Services = new();

    private ProjectsDTO data { get; set; } = new();

    private List<ProjectsDTO> projects = new();

    private bool loadFailed = false;

    private bool isLoading = true;



    private bool IsVisible { get; set; } = false;

    private bool ShowTeamWork = false;

    private int ProjectId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (!GlobalDataService.HasData)
        {
            // JSON.Serializer(GlobalDataService.Projects, "Before GlobalDataService.HasData");
            await GetProjectPerUserAsync();
        }
        else
        {
            // JSON.Serializer(GlobalDataService.Projects, "After GlobalDataService.HasData");
            projects = GlobalDataService.Projects;
            data = GlobalDataService.Data;
        }

        isLoading = false;

    }
    


    protected async Task GetProjectPerUserAsync()
    {
        try
        {
            data = new ProjectsDTO();
            projects = await api.GetProjectPerUserAsync();

            // Optional: Check if the first project has no services
            if (projects.Count > 0 && (projects[0].Services == null || projects[0].Services!.Count == 0))
            {
                projects.Clear(); // Or assign new List<ProjectsDTO>() again if preferred
            }

            // Save globally
            GlobalDataService!.Clear();
            GlobalDataService!.Projects = projects;
            GlobalDataService.Data = data;
            // Optional: serialize if needed
            // JSON.Serializer(projects, "ToDayWorkList:GetProjectPerUserAsync");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }

    private (string ColorClass, int DaysLeft, int RequiredUnit) GetWorkProgressColor(
      ServicesDTO service,
      int totalUnits,
      DateTime startDate,
      int completedUnits)
    {
        if (totalUnits == 0 || service.WorkTaskDetails == null)
            return ("", 0, 0);

        var breakpoints = DateService!.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);

        if (service.ServiceId == 118)
            JSON.Serializer(breakpoints, "breakpoints");

        var interval = DateService.GetCurrentInterval(breakpoints);
        var currentInterval = DateService.GetCurrentIntervalNumber(breakpoints);
        var unit = 0;

        if (interval == null || currentInterval == null)
            return ("", 0, 0);

        int totalWorkingDays = DateService.GetTotalDaysExcludingSundays(startDate, 30);
        int daysWorkedSoFar = DateService.GetWorkingDaysBetween(startDate, DateTime.Today);
        if (daysWorkedSoFar == 0 || totalWorkingDays == 0) return ("", 0, 0);

        DateTime intervalStart = interval.Value.Start.Date;
        DateTime intervalEnd = interval.Value.End.Date;
        int daysLeft = (intervalEnd - DateTime.Today).Days;

        if (daysLeft < 0) daysLeft = 0;

        if (IsFirstInterval(breakpoints))//first interval including first day
        {
            // Console.WriteLine("first interval");
            int intervalLength = (intervalEnd - intervalStart).Days + 1;//including first day
            int todayPosition = (DateTime.Today - intervalStart).Days + 1;//including first day
            bool isLastDay = todayPosition == intervalLength;

            if (isLastDay && currentInterval > completedUnits)
            {

                // Console.WriteLine("first interval if ");

                if (service.ServiceId == 118)
                {

                    Console.WriteLine("first interval isLastDay");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("first interval if ");
                    Console.WriteLine("daysLeft- " + daysLeft);
                    Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                    Console.WriteLine("completedUnits- " + completedUnits);
                }
                return ("medium-progress-bg", daysLeft, (int)currentInterval - completedUnits);
            }
            else if (isLastDay && currentInterval <= completedUnits)
            {


                // Console.WriteLine("first interval else if ");
                if (service.ServiceId == 118)
                {
                    Console.WriteLine("first interval isLastDay");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("first interval else if ");
                    Console.WriteLine("daysLeft- " + 0);
                    Console.WriteLine("(int)currentInterval- " + 0);
                    Console.WriteLine("completedUnits- " + 0);
                }


                return ("advanced-progress-bg", 0, 0);
            }
            else
            {
                if (currentInterval <= completedUnits)
                {
                    // Console.WriteLine("first interval else => if");

                    if (service.ServiceId == 118)
                    {
                        Console.WriteLine("first interval else =>if ");
                        Console.WriteLine("daysLeft- " + daysLeft);
                        Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                        Console.WriteLine("completedUnits- " + 0);
                    }
                    // return ("advanced-progress-bg", daysLeft, 0);
                    return ("", daysLeft, 0);
                }
                else
                {
                    // Console.WriteLine("first interval else => else");

                    if (service.ServiceId == 118)
                    {
                        Console.WriteLine("first interval else => else");
                        Console.WriteLine("daysLeft- " + daysLeft);
                        Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                        Console.WriteLine("completedUnits- " + completedUnits);
                    }
                    return ("", daysLeft, (int)currentInterval - completedUnits);
                }
                // Console.WriteLine("first interval else");

            }

        }

        else if (currentInterval - 1 > completedUnits)//check privious pending
        {
            // Console.WriteLine("check privious pending");
            int intervalLength = (intervalEnd - intervalStart).Days;//excluding first day
            int todayPosition = (DateTime.Today - intervalStart).Days;//excluding first day
            bool isLastDay = todayPosition == intervalLength;

            if (isLastDay)
            {

                // Console.WriteLine("check privious pending if ");
                if (service.ServiceId == 118)
                {
                    Console.WriteLine("check privious pending if");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("check privious pending if ");
                    Console.WriteLine("daysLeft- " + daysLeft);
                    Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                    Console.WriteLine("completedUnits- " + completedUnits);
                }
                return ("low-progress-bg", daysLeft, (int)currentInterval - completedUnits); // return privious pending + today(last day) pending
            }
            else
            {

                //return ((int)currentInterval - 1) - completedUnits;// return privious pending only
                // Console.WriteLine("check privious pending else ");

                if (service.ServiceId == 118)
                {
                    Console.WriteLine("check privious pending else");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("check privious pending else");
                    Console.WriteLine("daysLeft- " + daysLeft);
                    Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                    Console.WriteLine("completedUnits- " + completedUnits);
                }
                return ("low-progress-bg", daysLeft, ((int)currentInterval) - completedUnits);
            }

        }

        else// regularaty check
        {
            int intervalLength = (intervalEnd - intervalStart).Days;//excluding first day
            int todayPosition = (DateTime.Today - intervalStart).Days;//excluding first day
            bool isLastDay = todayPosition == intervalLength;
            // Console.WriteLine("regularaty check");

            if (isLastDay && currentInterval > completedUnits)
            {

                // Console.WriteLine("regularaty check if ");

                if (service.ServiceId == 118)
                {
                    Console.WriteLine("regularaty check if");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("regularaty check if ");
                    Console.WriteLine("daysLeft- " + daysLeft);
                    Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                    Console.WriteLine("completedUnits- " + completedUnits);
                }
                return ("medium-progress-bg", daysLeft, (int)currentInterval - completedUnits);

            }
            else if (isLastDay && currentInterval <= completedUnits)
            {


                // Console.WriteLine("regularaty check else if ");
                if (service.ServiceId == 118)
                {
                    Console.WriteLine("regularaty check else if");
                    Console.WriteLine("currentInterval:" + currentInterval);
                    Console.WriteLine("completedUnits:" + completedUnits);
                    Console.WriteLine("regularaty check else if ");
                    Console.WriteLine("daysLeft- " + 0);
                    Console.WriteLine("(int)currentInterval- " + 0);
                    Console.WriteLine("completedUnits- " + 0);
                }
                return ("advanced-progress-bg", 0, 0);
            }
            else
            {
                // Console.WriteLine("regularaty check else ");
                // Console.WriteLine("regularaty check else");
                // return ("", daysLeft, (int)currentInterval - completedUnits);
                if (currentInterval <= completedUnits)
                {
                    // Console.WriteLine("regularaty check else => if");
                    if (service.ServiceId == 118)
                    {
                        Console.WriteLine("regularaty check else if");
                        Console.WriteLine("completedUnits:" + completedUnits);
                        Console.WriteLine("regularaty check else => if");
                        Console.WriteLine("daysLeft- " + daysLeft);
                        Console.WriteLine("currentInterval- " + currentInterval);
                        Console.WriteLine("completedUnits- " + 0);
                    }
                    // return ("advanced-progress-bg", daysLeft, 0);
                    return ("", daysLeft, 0);
                }
                else
                {
                    // Console.WriteLine("regularaty check else => else");
                    if (service.ServiceId == 118)
                    {
                        Console.WriteLine("regularaty check else => else");
                        Console.WriteLine("daysLeft- " + daysLeft);
                        Console.WriteLine("(int)currentInterval- " + (int)currentInterval);
                        Console.WriteLine("completedUnits- " + completedUnits);
                    }
                    return ("", daysLeft, (int)currentInterval - completedUnits);
                }

            }

        }

    }

    public bool IsFirstInterval(List<DateTime> breakpoints)
    {
        DateTime currentDate = DateTime.Today;

        if (breakpoints.Count >= 2)
        {
            DateTime start = breakpoints[0].Date;
            DateTime end = breakpoints[1].Date;
            if (currentDate >= start && currentDate <= end)
            {
                return true;
            }
        }

        return false;
    }

    private bool MetricMatch(WorkTaskDetailsDto w, WorkMetricType metricType)
    {
        return metricType switch
        {
            WorkMetricType.SharedPost => w.SharedPost > 0,
            WorkMetricType.CreatedReels => w.CreatedReels > 0,
            WorkMetricType.Backlink => w.Backlink > 0,
            WorkMetricType.Clasified => w.Clasified > 0,
            WorkMetricType.SocialSharing => w.SocialSharing > 0,
            _ => false
        };
    }


    private void AddWorkRecord(ServicesDTO service)
    {
        Service = service;
        IsVisible = true;
    }


    private async Task HandleWorkFormSubmit(bool isSuccess)
    {

        IsVisible = false;
        await GetProjectPerUserAsync();

    }
    private void OnDialogCancel()
    {
        IsVisible = false;
    }

    private void ViewTeamWork(int ProjectId)
    {
        ShowTeamWork = true;
        this.ProjectId = ProjectId;
    }

    private string GetProgressClass(decimal current, decimal total)
    {
        if (total == 0)
            return string.Empty;

        var percentage = (current / total) * 100;

        if (percentage < 50)
            return "low-progress";
        else if (percentage < 80)
            return "medium-progress";
        else
            return "high-progress";
    }


    private string searchText = "";

    private IEnumerable<ProjectsDTO> filteredProjects => string.IsNullOrWhiteSpace(searchText)
        ? projects
        : projects.Where(p =>
            (p.ProjectId.ToString()!.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.ProjectName) && p.ProjectName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
            (!string.IsNullOrEmpty(p.Client?.ClientName) && p.Client.ClientName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        );



    // Summary Properties
    private int TotalPosts => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.TotalPost);

    private int TotalReels => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.TotalReels);

    private decimal TotalAdsBudget => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.AdsBudget);

    private int TotalBacklink => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.Backlink);

    private int TotalClasified => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.Clasified);

    private int TotalSocialSharing => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.SocialSharing);

    private int CompletedPosts => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompletePost ?? 0);

    private int CompletedReels => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompleteReels ?? 0);

    private decimal CompleteUsedAdsBudget => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompleteUsedAdsBudget ?? 0);

    private int CompletedBacklink => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompleteBacklink ?? 0);

    private int CompletedClasified => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompleteClasified ?? 0);

    private int CompletedSocialSharing => projects
    .Where(p => p.ProjectType == ProjectType.SERVICE)
    .SelectMany(p => p.Services ?? Enumerable.Empty<ServicesDTO>())
    .Sum(s => s.CompleteSocialSharing ?? 0);

}
