@page "/to-day-work"
@inject ApiService api
@using OfficeProject.Models.DTO
@using System.ComponentModel.DataAnnotations
@using OfficeProject.Web.Pages.DialogModel
@using System.Text.Json
@using OfficeProject.Models.Enums

<style>
    .low-progress {
        background-color: #f8d7da; /* light red */
        color: #721c24;
    }

    .medium-progress {
        background-color: #fff3cd; /* light yellow */
        color: #856404;
    }

    .high-progress {
        background-color: #d4edda; /* light green */
        color: #155724;
    }


    .low-progress-bg {
    background-color: #9F1E1E !important; /* Light red */
    color: #FFFFFF !important;
    }

    .medium-progress-bg {
    background-color: #F6BE13 !important; /* Light yellow */
    color: #000000 !important;
    }

    .high-progress-bg {
    background-color: #d4edda !important; /* light green */
    color: #155724 !important;
    }


    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff; /* or your header background */
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .modal {
    z-index: 1050;
    }

    /* Activity dialog should appear above main form */
    .activity-dialog-modal {
    z-index: 1060 !important;
    }

    /* Backdrop for activity dialog */
    .activity-dialog-backdrop {
    z-index: 1055 !important;
    background-color: rgba(0,0,0,0.5);
    }

    body.modal-open {
    overflow: hidden;
    }

    .sticky-header th {
    position: sticky;
    top: 0;
    background-color: #e9f4ff;
    z-index: 10;
    }

    .truncate-text {
    display: inline-block;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

    .large-checkbox {
    transform: scale(1.4);
    transform-origin: left center;
    margin-right: 0.5rem;
    }

    .checkbox-label {
    display: flex;
    align-items: center;
    font-weight: 500;
    font-size: 1rem;
    margin-bottom: 0.5rem;
    cursor: pointer;
    }

    /*    .fixed-top {
    z-index: 2000;
    }

    .scale-wrapper {
    transform: scale(0.85);
    transform-origin: top left;
    } */
</style>


<AuthorizeView Context="outerAuthContext">
    <Authorized>


        <!-- Table Section -->

        <h3 class="mb-4 fw-bold text-primary">Today Works</h3>
        <div class="card-body">

            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                    <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            @if (projects == null || !projects.Any())
            {
                <div class="alert alert-info">No Services found</div>
            }
            else
            {
                <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-info sticky-header">
                            <tr>
                                <th>PID-SID</th>
                                <th>Project Name</th>
                                <th>Post</th>
                                <th>Reels</th>
                                <th>Backlink</th>
                                <th>Classified</th>
                                <th>Social Sharing</th>
                                <th>Used Ads Budget</th>
                                <th>Billing Type</th>
                                <th>Team Work</th>
                                <th>Action</th>
                            </tr>

                        </thead>
                        <tbody>
                            @foreach (var project in projects)
                            {
                                if (project.Services != null && project.Services.Any())
                                {
                                    foreach (var service in project.Services)
                                    {
                                        <tr>
                                            <td>@project.ProjectId - (@service.ServiceId)</td>
                                            <td>@project.ProjectName - (@service.ServiceName)</td>
                                            <td class="@DayWorktProgressOnPostColor(service, WorkMetricType.SharedPost, (int)service.TotalPost, service.StartDate)">@service.CompletePost of (@service.TotalPost)</td>
                                            <td class="@DayWorktProgressOnReelsColor(service, WorkMetricType.CreatedReels, (int)service.TotalPost, service.StartDate)">@service.CompleteReels of (@service.TotalReels)</td>
                                            <td class="@GetProgressClass((int)service.CompleteBacklink!,service.Backlink)">@service.CompleteBacklink of (@service.Backlink)</td>
                                            <td class="@GetProgressClass((int)service.CompleteClasified!,service.Clasified)"> @service.CompleteClasified of (@service.Clasified)</td>
                                            <td class="@GetProgressClass((int)service.CompleteSocialSharing!,service.SocialSharing)">@service.CompleteSocialSharing of (@service.SocialSharing)</td>
                                            <td class="@GetProgressClass(service.CompleteUsedAdsBudget ?? 0, service.AdsBudget)">@((service.CompleteUsedAdsBudget ?? 0).ToString("c", new System.Globalization.CultureInfo("en-IN")))of (@service.AdsBudget.ToString("c", new System.Globalization.CultureInfo("en-IN"))) </td>
                                            <td>@service.BillingType</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => ViewTeamWork((int)project.ProjectId!)" @onclick:stopPropagation
                                                title="View Team Work">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary"
                                                @onclick="() => AddWorkRecord(service)">
                                                    <i class="fas fa-plus"></i> Add Work
                                                </button>
                                            </td>
                                        </tr>

                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="13" class="text-center text-muted">
                                            No services found for project: @data.ProjectName
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>

                    </table>
                </div>

            }
        </div>
        <pre>@jsondata</pre>

        @if (IsVisible)
        {
            <DialogAddWorkTask IsVisible="@IsVisible"
            service="@Service"
            isAddWorkFormSubmit="@HandleWorkFormSubmit"
            OnCancel="@OnDialogCancel" />
        }


        @if (ShowTeamWork)
        {
            <DialogViewTeamWorks ShowTeamWork="@ShowTeamWork"
            ProjectId="@ProjectId"
            IsDialogClose="@((bool val) => ShowTeamWork = val)" />

        }

    </Authorized>

    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login", replace: true);
        }
    </NotAuthorized>



</AuthorizeView>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private ApiService ApiService { get; set; } = null!;
    [Inject] private HttpClient Http { get; set; } = null!;
    [Inject] private IDataSerializer? DataSerializer { get; set; }
    [Inject] private DateService DateService { get; set; }
    [Inject] private IService? GetServices { get; set; }


    private List<DateTime> breakpoints = new();

    private BillingType billingType = BillingType.Monthly;

    private ServicesDTO Service;

    private List<ServicesDTO> Services = new();

    private ProjectsDTO data { get; set; }

    private List<ProjectsDTO> projects;

    private string jsondata { get; set; }

    private bool loadFailed = false;

    private bool isLoading = true;



    private bool IsVisible { get; set; } = false;

    private bool ShowTeamWork = false;

    private int ProjectId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetProjectPerUserAsync();
        isLoading = false;
    }


    protected async Task GetProjectPerUserAsync()
    {
        try
        {
            data ??= new ProjectsDTO();
            projects ??= new List<ProjectsDTO>();

            projects = await api.GetProjectPerUserAsync();
            // Optional: Check if first project has no services, then clear the whole list
            if (projects.Count > 0 && (projects[0].Services == null || projects[0].Services!.Count == 0))
            {
                projects = new List<ProjectsDTO>();
            }
            // DataSerializer.Serializer(projects, "ToDayWorkList:GetProjectPerUserAsync");

        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error loading projects: {ex.Message}");
        }

    }

    private string DayWorktProgressOnPostColor(ServicesDTO service, WorkMetricType metricType, int totalUnits, DateTime startDate)
    {
        var breakpoints = DateService.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);

        var interval = DateService.GetCurrentInterval(breakpoints);

        var RedFlag = false;

        var intervalDay = DateService.GetIntervalDaysExcludingSundays(startDate);

        var TotalDay = DateService.GetTotalDaysExcludingSundays(startDate, 30);

        var averageUnit = (float)totalUnits / TotalDay;

        var completeUnit = (float)service.CompletePost / intervalDay;

        // if (service.ServiceId == 1032)
        // {
        //     Console.WriteLine($"intervalDay: {intervalDay}");

        //     Console.WriteLine($"TotalDay: {TotalDay}");

        //     Console.WriteLine($"averageUnit: {averageUnit}");

        //     Console.WriteLine($"completeUnit: {completeUnit}");
        // }

        if (averageUnit <= completeUnit)
        {

            RedFlag = false;
          
                // Console.WriteLine($"Task complete:" + RedFlag);

                if (interval != null && service.WorkTaskDetails != null)

                {
                    int intervalLength = (interval.Value.End.Date - interval.Value.Start.Date).Days + 1;
                    int todayPosition = (DateTime.Today - interval.Value.Start.Date).Days + 1;
                    bool hasWorkInInterval = service.WorkTaskDetails.Any(w =>
                        w.WorkDate.Date >= interval.Value.Start.Date &&
                        w.WorkDate.Date <= interval.Value.End.Date &&
                        MetricMatch(w, metricType)
                    );
                    //         DataSerializer.Serializer(breakpoints, "breakpoints");
                    // Console.WriteLine($"interval: {interval}");
                    // Console.WriteLine($"intervalLength: {intervalLength}");
                    // Console.WriteLine($"todayPosition: {todayPosition}");
                    // Console.WriteLine($"hasWorkInInterval: {hasWorkInInterval}");


                    if (!hasWorkInInterval)
                    {
                        if (todayPosition == intervalLength)
                            return "low-progress-bg";
                        else if (todayPosition >= 1 && todayPosition <= intervalLength-1)
                            return "medium-progress-bg";
                        
                    }
                    return "";



                }
            

        }
        else
        {

            RedFlag = true;
            // if (service.ServiceId == 1032)
            // {
            //     Console.WriteLine($"Task not complete:" + RedFlag);
            // }
            return "low-progress-bg";
        }

        return "";
    }
    private string DayWorktProgressOnReelsColor(ServicesDTO service, WorkMetricType metricType, int totalUnits, DateTime startDate)
    {
        var breakpoints = DateService.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);

        var interval = DateService.GetCurrentInterval(breakpoints);

        var RedFlag = false;

        var intervalDay = DateService.GetIntervalDaysExcludingSundays(startDate);

        var TotalDay = DateService.GetTotalDaysExcludingSundays(startDate, 30);

        var averageUnit = (float)totalUnits / TotalDay;

        var completeUnit = (float)service.CompleteReels / intervalDay;

        // if (service.ServiceId == 1032)
        // {
        //     Console.WriteLine($"intervalDay: {intervalDay}");

        //     Console.WriteLine($"TotalDay: {TotalDay}");

        //     Console.WriteLine($"averageUnit: {averageUnit}");

        //     Console.WriteLine($"completeUnit: {completeUnit}");
        // }

        if (averageUnit <= completeUnit)
        {

            RedFlag = false;
          
                Console.WriteLine($"Task complete:" + RedFlag);

                if (interval != null && service.WorkTaskDetails != null)

                {
                    int intervalLength = (interval.Value.End.Date - interval.Value.Start.Date).Days + 1;
                    int todayPosition = (DateTime.Today - interval.Value.Start.Date).Days + 1;
                    bool hasWorkInInterval = service.WorkTaskDetails.Any(w =>
                        w.WorkDate.Date >= interval.Value.Start.Date &&
                        w.WorkDate.Date <= interval.Value.End.Date &&
                        MetricMatch(w, metricType)
                    );
                    //         DataSerializer.Serializer(breakpoints, "breakpoints");
                    // Console.WriteLine($"interval: {interval}");
                    // Console.WriteLine($"intervalLength: {intervalLength}");
                    // Console.WriteLine($"todayPosition: {todayPosition}");
                    // Console.WriteLine($"hasWorkInInterval: {hasWorkInInterval}");


                    if (!hasWorkInInterval)
                    {
                        if (todayPosition == intervalLength)
                            return "low-progress-bg";
                        else if (todayPosition >= 1 && todayPosition <= intervalLength-1)
                            return "medium-progress-bg";
                        
                    }
                    return "";



                }
            

        }
        else
        {

            RedFlag = true;
            // if (service.ServiceId == 1032)
            // {
            //     Console.WriteLine($"Task not complete:" + RedFlag);
            // }
            return "low-progress-bg";
        }

        return "";
    }

    private string DayWorktProgressColor(ServicesDTO service, WorkMetricType metricType, int totalUnits, DateTime startDate)
    {
        var breakpoints = DateService.GetBreakPointDates(startDate, (BillingType)service.BillingType!, totalUnits);

        var interval = DateService.GetCurrentInterval(breakpoints);

        var RedFlag = false;

        var intervalDay = DateService.GetIntervalDaysExcludingSundays(startDate);

        var TotalDay = DateService.GetTotalDaysExcludingSundays(startDate, 30);

        var averageUnit = (float)totalUnits / TotalDay;

        var completeUnit = (float)service.CompletePost / intervalDay;
        if (service.ServiceId == 1032)
        {
            // Console.WriteLine($"intervalDay: {intervalDay}");
            // Console.WriteLine($"TotalDay: {TotalDay}");
            // Console.WriteLine($"averageUnit: {averageUnit}");
            // Console.WriteLine($"completeUnit: {completeUnit}");
        }

        if (averageUnit <= completeUnit)
        {
            RedFlag = false;
        }
        else
        {
            RedFlag = true;
        }

        if (RedFlag)
        {
            if (service.ServiceId == 1032)
            {
                // Console.WriteLine($"RedFlag:" + RedFlag);
            }
            bool hasWorkInInterval = service.WorkTaskDetails.Any(w =>
                MetricMatch(w, metricType)
            );


        }
        if ((interval != null && service.WorkTaskDetails != null && RedFlag == false))
        {
            if (service.ServiceId == 1032)
            {
                // Console.WriteLine($"!RedFlag:" + RedFlag);
            }
            int intervalLength = (interval.Value.End.Date - interval.Value.Start.Date).Days + 1;
            int todayPosition = (DateTime.Today - interval.Value.Start.Date).Days + 1;
            bool hasWorkInInterval = service.WorkTaskDetails.Any(w =>
                w.WorkDate.Date >= interval.Value.Start.Date &&
                w.WorkDate.Date <= interval.Value.End.Date &&
                MetricMatch(w, metricType)
            );
            if (service.ServiceId == 1032)
            {
                // DataSerializer.Serializer(breakpoints, "breakpoints");
                // Console.WriteLine($"interval: {interval}");
                // Console.WriteLine($"intervalLength: {intervalLength}");
                // Console.WriteLine($"todayPosition: {todayPosition}");
                // Console.WriteLine($"hasWorkInInterval: {hasWorkInInterval}");
            }

            if (todayPosition == intervalLength)
            {
                if (hasWorkInInterval)
                    return "low-progress-bg";
                else
                    return "";
            }


            if (intervalLength == 1)
            {
                return hasWorkInInterval ? "medium-progress-bg" : "low-progress-bg";
            }
            else if (intervalLength == 2)
            {
                if (todayPosition == 1)
                    return hasWorkInInterval ? "medium-progress-bg" : "";
            }
            else if (intervalLength == 3)
            {
                if (todayPosition == 2)
                    return hasWorkInInterval ? "" : "medium-progress-bg";
            }

            return hasWorkInInterval ? "medium-progress-bg" : "low-progress-bg";
        }

        return "";
    }

    private bool MetricMatch(WorkTaskDetailsDto w, WorkMetricType metricType)
    {
        return metricType switch
        {
            WorkMetricType.SharedPost => w.SharedPost > 0,
            WorkMetricType.CreatedReels => w.CreatedReels > 0,
            WorkMetricType.Backlink => w.Backlink > 0,
            WorkMetricType.Clasified => w.Clasified > 0,
            WorkMetricType.SocialSharing => w.SocialSharing > 0,
            _ => false
        };
    }


    private void AddWorkRecord(ServicesDTO service)
    {
        Service ??= new ServicesDTO();
        Service = service;
        IsVisible = true;
    }


    private async Task HandleWorkFormSubmit(bool isSuccess)
    {

        IsVisible = false;
        await GetProjectPerUserAsync();

    }
    private void OnDialogCancel()
    {
        IsVisible = false;
    }

    private void ViewTeamWork(int ProjectId)
    {
        ShowTeamWork = true;
        this.ProjectId = ProjectId;
    }

    private string GetProgressClass(decimal current, decimal total)
    {
        if (total == 0)
            return string.Empty;

        var percentage = (current / total) * 100;

        if (percentage < 50)
            return "low-progress";
        else if (percentage < 80)
            return "medium-progress";
        else
            return "high-progress";
    }

}
