@using System.ComponentModel.DataAnnotations
@using OfficeProject.Models.DTO
@using OfficeProject.Web.Pages.DialogModel
@using OfficeProject.Web.Pages.TappanDialog
@inject ApiService api
@inject NavigationManager Navigation
@inject IDataSerializer? DataSerializer
@inject IWorkTaskDetailsService WorkTaskDetailsService
@inject ApiService api

<h5 class="mb-3">Work Task List</h5>

<div class="card shadow-sm border-0">
    <div class="card-header bg-white ">
        <div class=" gap-2 flex-wrap">
            <div class="row">
                <div class="col-md-4">
                    <input type="text" class="form-control" placeholder="Search by SID or Service Name" @bind="searchText" />
                </div>
                <div class="col-md-4">
                    <input type="date" class="form-control" @bind="searchDate" />
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary" @onclick="ClearSearch">Clear</button>
                </div>
            </div>



        </div>

    </div>

    <div style="max-height: 325px; overflow-y: auto;">

        <table class="table table-hover table-bordered table-sm mb-0">
            <thead class="table-info sticky-top bg-info text-black">
                <tr class="align-middle text-center">
                    <th style="min-width: 70px;">SID</th>
                    <th style="min-width: 150px;">Service Name</th>
                    <th style="min-width: 120px;">Date</th>
                    <th style="min-width: 200px;">Task</th>
                    <th>Post</th>
                    <th>Reels</th>
                    <th>Ads</th>
                    <th>Backlink</th>
                    <th>Clasified</th>
                    <th>Socil Sharing</th>
                    <th>Status</th>
                    <th>Remarks</th>
                    <th style="min-width: 70px;">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (!FilteredTableData.Any())
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">No data available</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in FilteredTableData)
                    {
                        <tr @onclick="() => OnRowClick(item)" style="cursor: pointer;" @onclick:stopPropagation="true">
                            <td class="text-center">@item.ServiceId</td>
                            <td>@item.ServiceName</td>
                            <td>@item.WorkDate.ToString("dd-MMM-yyyy", new System.Globalization.CultureInfo("en-IN"))</td>
                            <td>@item.Task</td>
                            <td class="text-center">@item.SharedPost</td>
                            <td class="text-center">@item.CreatedReels</td>
                            <td class="text-center">@item.UsedAdsBudget</td>
                            <td class="text-center">@item.Backlink</td>
                            <td class="text-center">@item.Clasified</td>
                            <td class="text-center">@item.SocialSharing</td>
                            <td class="text-center @GetStatusClass(item.Status)">@item.Status</td>
                            <td>@item.Remarks</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-warning"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => EditWorkTask(item)">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<DialogUpdateWorkTask IsVisible="@IsVisible"
                      IsFormSubmit="@ReloadWorkTask"
                      Data="@WorkRecord" />

<TappanSeoTaskOthersTask IsVisible="@ShowDialog"
                         WorkRecord="@WorkRecord"
                         workTaskId="@workTaskId"
                         IsVisibleChanged="@((bool val) => ShowDialog = val)" />


@code {
    private bool IsVisible = false;
    private bool ShowDialog = false;
    private int workTaskId { get; set; }
    private WorkTaskDetailsDto WorkRecord { get; set; }
    private List<WorkTaskDetailsDto> tableData { get; set; } = new();

    private string searchText = "";

    private DateTime? searchDate;

    [Parameter]
    public EventCallback<bool> isFormSubmit { get; set; }

    [Parameter] public int ProjectId { get; set; }

    private void ClearSearch()
    {
        searchText = "";
        searchDate = null;
    }

    protected override void OnParametersSet()
    {

        base.OnParametersSet();
    }

    private IEnumerable<WorkTaskDetailsDto> FilteredTableData =>
        tableData.Where(item =>
            (string.IsNullOrWhiteSpace(searchText) ||
                item.ServiceId.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(item.ServiceName) &&
                 item.ServiceName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
            &&
            (!searchDate.HasValue || item.WorkDate.Date == searchDate.Value.Date)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkList();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadWorkList();
    }

    private async Task LoadWorkList()
    {
        try
        {
            var workTasks = await api.GetUserWorksAsync(ProjectId);

            tableData = workTasks
                .SelectMany(p => p.Services ?? new List<ServicesDTO>())
                .SelectMany(s => s.WorkTaskDetails ?? new List<WorkTaskDetailsDto>())
                .ToList();

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading work records: " + ex.Message);
            tableData = new();
        }
    }


    private void EditWorkTask(WorkTaskDetailsDto work)
    {
        IsVisible = true;
        ShowDialog = false;
        WorkRecord = work;
    }



    private async Task ReloadWorkTask(bool isSuccess)
    {
        if (isSuccess)
        {
            await LoadWorkList();
            await isFormSubmit.InvokeAsync(true);
            StateHasChanged();
        }

        IsVisible = false;
        ShowDialog = false; // <--- Add this line
    }


    private async Task OnRowClick(WorkTaskDetailsDto item)
    {


        try
        {

            var Data = await api.GetWorkTaskDetailsById((int)item.WorkTaskId!);


            if (Data != null && (
               Data.SeoTaskDetailsDto.Count > 0 || Data.OthersTaskDetailsDto.Count > 0 || Data.WebDeveTaskDetailsDto.Count > 0))
            {
                WorkRecord = Data;
                DataSerializer?.Serializer(WorkRecord, "LoadWorkTask");
                ShowDialog = true;
                IsVisible = false;
                workTaskId = (int)item.WorkTaskId!;
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading work task: {ex.Message}");
        }
       
    }
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Completed" => "text-success fw-bold",     // green
            "In-Progress" => "text-primary fw-bold",   // blue
            "Pending" => "text-warning fw-bold",       // yellow/orange
            _ => ""
        };
    }

}
